<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.4.2" created="2013-10-27 13:28" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Cocoa Mondo</title>
	<link>http://www.preenandprune.com/cocoamondo</link>
	<description>Kode with Koda</description>
	<pubDate>Sun, 27 Oct 2013 13:28:45 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.preenandprune.com/cocoamondo</wp:base_site_url>
	<wp:base_blog_url>http://www.preenandprune.com/cocoamondo</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>matthieu.cormier@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>Matthieu Cormier</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[Matthieu Cormier]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.4.2</generator>

	<item>
		<title>Creating an iTunes Scrollbar</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=8</link>
		<pubDate>Tue, 25 Mar 2008 17:22:37 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[In my previous post I published some sample code on how to use a mask on a core animation layer. Here is a practical example of a mask, creating a scroll control almost identical to the one displayed in iTunes.
<p style="text-align: center;"><img class="aligncenter  wp-image-8" title="caitunesscrollerwin" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/04/caitunesscrollerwin.png" alt="CAScrollBar" /></p>
When developing <a href="http://sunflower.preenandprune.com">SunFlower</a> 0.8 I changed one of the custom views to use core animation. Faced with the choice to either hook up the new view to a standard cocoa scrollbar or create a custom core animation one I chose the latter, and completely plagiarized the scrollbar in iTunes. Many people use iTunes so this component provides a flashier scrollbar interface that is still familiar to users.
<h3>The anatomy of our scrollbar</h3>
A scrollbar is made up of a couple of different parts and it is useful to define what those parts are called. You may find these defined differently elsewhere, however these are the terms that were chosen for the source.
<p style="text-align: center;"><img class="aligncenter  wp-image-11" title="scrollbaranatomy" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/04/scrollbaranatomy.png" alt="" /></p>
The scroll arrows and the slider are drawn and then masks are applied to them to create the rounded effects. The image below shows the layer hierarchy used to create this component.
<p style="text-align: center;"><img class="aligncenter  wp-image-10" title="scrollerlayers" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/04/scrollerlayers.png" alt="" /></p>
Because the slider can grow in size depending on the amount of content being shown it is broken up into three layers (left, middle and right). Masks are applied to the left and the right layers and their size remains constant, the middle layer grows as needed.
<h3>Protocols</h3>
If you decide to use this code as a basis for an application, the first thing you most likely will want to do is to replace the content view. To make this as easy as possible I have defined protocols in the file SFScrollerProtocols.h
<pre lang="objc">@protocol SFScrollerContentController

- (BOOL)isRepositioning;
- (void)scrollPositionChanged:(CGFloat)position;
- (void)scrollContentResized;

@end

@protocol SFScrollerContent

- (CGFloat)contentWidth;
- (CGFloat)visibleWidth;
- (CGFloat)stepSize;

- (void)moveScrollView:(CGFloat)dx;

// where position is a number between 0.0 and 1.0 representing the
// posible positions the visible rect can be at
- (void)scrollToPosition:(CGFloat)position;

@end</pre>
Although the protocols aren't documented very well, a little peeking and poking at the kode should get you what you want.

You can <a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/caitunesscroller.zip">grab the kode here.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2008-03-25 10:22:37</wp:post_date>
		<wp:post_date_gmt>2008-03-25 17:22:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>creating-an-itunes-scrollbar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="core-animation"><![CDATA[Core Animation]]></category>
		<category domain="post_tag" nicename="core-animation"><![CDATA[Core Animation]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tracking a build count with xCode</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=24</link>
		<pubDate>Tue, 22 Apr 2008 21:10:35 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[This article applies to people working on a solo project who want to track how many times they have gone through the infamous edit, compile, run and test cycle.  Once you have written one or two simple applications you may have come to the obvious conclusion that building good software takes time.

<h3>Executive summary</h3>

Your time is not infinite and it is valuable to know where you are spending it.  What I'm going to show you is how to increment a counter by adding a <strong>Run Script Phase</strong> to your project.  This script generates a .xcconfig file which we then use to put the build number directly in the about box.

<h3>Some data from my projects</h3>

I first started using this technique with <a href="http://allusions.sourceforge.net/laughMan/">Laughing Man</a> but not until five versions had been released.

<p class="alignCenter">
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/lmanbuildchart.jpg" alt="" title="lmanbuildchart" width="407" height="379" class="size-full wp-image-14" />
</p>

<a href="http://sunflower.preenandprune.com">SunFlower</a> was started after Laughing Man so I started collecting data from the beginning of the project. Below is the data for builds 0.1 through to 0.9.

<p class="alignCenter">
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/sflowerbuildchart.jpg" alt="" title="sflowerbuildchart" width="386" height="393" class="aligncenter size-full wp-image-15" />
</p>

I find this information very useful because I can correlate it with the difference in lines of code and what changes were made in that version.  This can give valuable perspective on whether that "easy new feature" or change was really that easy.   It also helps to roughly gauge whether your standard for quality of work has gone up.

<p class="alignCenter">
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/sflowerbuildgraph.jpg" alt="" title="sflowerbuildgraph" width="463" height="326" class="aligncenter size-full wp-image-16" />
</p>

You will notice that for SunFlower, there is a major spike for version 0.5 and 0.8.  In both cases I know why those versions took so many builds.  0.8, for instance is when I introduced the iTunes style scrollbar which took much work to refine.

<h3>The incrementing shell script</h3>

The first thing we need is something to increment our build number.  The shell script  listing below does just that.  It requires one parameter, which is the name of the file used to store the current build number.  This allows us to use this script for multiple projects at the same time.

<pre lang="bash">
#!/bin/bash
#
# buildIncrementer
#  -- a simple script to increment the
#      build number through Xcode
#
if [ -e "$1" ]
then
  echo " do nothing" > /dev/null
else
  # creat an empty file
  touch $1
fi

#increment the build number
read number  < $1
let number++
echo $number
echo $number > $1
</pre>

I have this script saved in the bin directory of my home directory as <strong>buildIncrementer</strong>.  Copy the script and place it where you like on your machine.

<h3>Adding the run script phase to the project</h3>

To use the build incrementer we need to add a run script phase to the project.  Find the target you would like to apply this to and right click on it.  Choose <em>Add --> New Build Phase --> New Run Script Build Phrase</em>.

<p class="alignCenter">
<a href='http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/04/addingbuildphase.jpg'><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/04/addingbuildphase-300x145.jpg" alt="" title="addingbuildphase" width="300" height="145" class="aligncenter size-medium wp-image-17" /></a>
</p>

Now right click and choose <em>"Get Info"</em> on the newly created build phase.  Modify the script text so that it is like the image below.

<p class="alignCenter">
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/runscript.jpg" alt="" title="runscript" width="436" height="593" class="size-full wp-image-18" border="2" />
</p>

Now run your application through xCode and it will run your script.  This will cause the file version.xcconfig to be created in your project directory.  You can look at version.xcconfig in a text editor it will contain "CURRENT_PROJECT_VERSION = 1".

<h3>Adding the build number to the about box</h3>

Now that we've got a count of how many builds have occurred it would be nice to put that build number in the about box.  The first thing we need to do is add the file version.xcconfig to the project.

Once you've added the dynamically generated .xcconfig file you need to modify the build settings of the project so that the project is based on that file.  Choose <em>"Get Info"</em> on the project and select the Build tab.  Set configuration to <em>"All Configurations"</em> and then choose <strong>version</strong> in the <strong>Based On</strong> combo box at the bottom of the window.

<p class="alignCenter">
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/basedon.jpg" alt="" title="basedon" width="390" height="593" class="size-full wp-image-19" />
</p>

Lastly, edit the info.plist file so that <strong>CFBundleVersion</strong> uses <strong>${CURRENT_PROJECT_VERSION}</strong> and add a CFBundleShortVersionString.

<pre lang="xml">
  <key>CFBundleShortVersionString</key>
  <string>0.1</string>
  <key>CFBundleVersion</key>
  <string>${CURRENT_PROJECT_VERSION}</string>
</pre>

It is important to note that you must do a clean for the latest project build number to appear in the about box.  This is because the info.plist file is only regenerated by xCode if it needs to be.

<p class="alignCenter">
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/aboutbox.jpg" alt="" title="aboutbox" width="284" height="174" class="size-full wp-image-20" border="2"/>
</p>

If you're too lazy to set this up you can <a href='http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/xcodebuildcounting.zip'> download a self-contained xCode project</a> that has all these steps setup.

Happy Koding,]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2008-04-22 14:10:35</wp:post_date>
		<wp:post_date_gmt>2008-04-22 21:10:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>tracking-a-build-count-with-xcode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xcode"><![CDATA[xCode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Loading a Message Url Drop</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=30</link>
		<pubDate>Tue, 12 Aug 2008 01:08:14 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="left">
In Leopard a new url type of URl has been created.  Message urls
(i.e. message://%3C1213312431.3782@hoopla.com%3E)
for referencing mail messages in Mail.app.  This is thoroughly documented by the almighty <a href="http://daringfireball.net/2007/12/message_urls_leopard_mail#fn1-2007-12-04">Grubes.</a>  In this entry I am going to explore how to use this message url to find the message on disk and load that message.  The techniques discussed work only for messages that are stored locally.  Accessing messages stored remotely on an email server is left as an exercise for the reader.
</p>

<p align="left">
You can create an application that accepts the URL drop type [VERIFY], and receive this message url type.  However, there is no easy way to get the contents of the URL.  Both the NSString method string, stringWithContentsOfURL: and the NSData method dataWithContentsOfURL: produce nil with a message URL.
</p>

<p align="left">Mail.app stores its message data on disk under the directory <b>[UserHome]/Library/Mail/Mailboxes.</b>

To find the email message file for the message url we can use a recursive grep under that directory.
<strong>grep -r 1213312431.3782@ hoopla.com *</strong>

This will return a result similar to:
<em>hoopla.mbox/Messages/2755.emlx:Message-Id: <1213312431.3782@hoopla.com></em>
</p>

<p alight="left">
With that result we know what file the message is in and we can load the message data.  This doesn't feel like the most elegant solution, how will it scale?  If all these emlx files have a Message-Id: line which is almost identical to Apple's message URL format, maybe we should create an index of all these  message ID's?
</p>

<p>Apple has provided us with an index in the form of an sqlite3 database.  The index is called "Envelope Index" and can be accessed with the command
<strong>sqlite3 Envelope\ Index</strong>
We can get the info we want with the following SQL command:

select messages.rowid, mailboxes.url from messages, mailboxes where date_sent = 1213312431 and mailboxes.rowid = mailbox;

This will give us a result like below:
2755|local:///SunFlower/Hoopla

The message ID (2755) is the file we are looking for (2755.emlx).  The mailbox url helps us locate where it is on disk SunFlower/Hoopla.mbox/Messages.

So we need to load [UserHome]/Library/Mail/Mailboxes/SunFlower/Hoopla.mbox/Messages/2755.emlx
</p>
<h2>Just One Thing...</h2>

<p>Accessing the Envelope Index database is not always guaranteed.  If Mail.app is checking it's mail boxes on remote servers it will lock the database.  This makes even a read only select statement not possible. But there's no reason to choose one technique over the other.  We can attempt a database select, and if that doesn't work, then we can do the slower brute force recursive grep.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2008-08-11 18:08:14</wp:post_date>
		<wp:post_date_gmt>2008-08-12 01:08:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>An Introduction to Handling Dock Icon Drags</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=32</link>
		<pubDate>Sun, 24 Aug 2008 02:45:53 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[One of the slickest touches you can add to your application is handling dock drags.

To add dock icon drag support you need to register for the <strong>open contents</strong> event and register the file types your application supports (if it supports files).

<h3>Registering for the open contents event</h3>

Register for the open contents event with a little kode and some entries in your info.plist file.  What you put in the info.plist file determines what type of data your application accepts.  Below is a plist entry that accepts string and URL data.

<pre lang="xml">
<key>NSServices</key>
<array>
  <dict>
    <key>NSPortName</key>
    <string>DockDrop</string>
    <key>NSSendTypes</key>
    <array>
      <string>NSStringPboardType</string>
      <string>NSURLPboardType</string>
    </array>
  </dict>
</array>
</pre>

After the application launches, you register for the open contents event with the following kode.

<pre lang="objc" >
- (void) applicationDidFinishLaunching:
  (NSNotification *) notification {

  [[NSAppleEventManager sharedAppleEventManager]
    setEventHandler: self
    andSelector: @selector(handleOpenContentsEvent:replyEvent:)
    forEventClass:kCoreEventClass andEventID:kAEOpenContents];
}

- (void) handleOpenContentsEvent:
  (NSAppleEventDescriptor *) event
  replyEvent: (NSAppleEventDescriptor *) replyEvent {

  // TODO -- handle event

  return;
}

</pre>

<h3>Registering for supported files</h3>

If you want to support file drags you have to add some more kode and some more groovy xml to the plist file.  In our sample application we will add some xml that states that we support all files and simply log the file names in the code.

<pre lang="xml">
<key>CFBundleDocumentTypes</key>
<array>
  <dict>
    <key>CFBundleTypeExtensions</key>
    <array>
      <string>*</string>
    </array>
    <key>CFBundleTypeName</key>
    <string>Plain Text File</string>
    <key>CFBundleTypeOSTypes</key>
    <array>
      <string>****</string>
    </array>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
  </dict>
</array>
</pre>

<pre lang="objc">
- (id) init {
  if ((self = [super init])) {
    [NSApp setDelegate: self];
  }

  return self;
}

- (void) application: (NSApplication *) app
  openFiles: (NSArray *) filenames {
  NSLog(@"Received a request to open the following files... ");
  for( NSString* filename in filenames ) {
    NSLog(@"TODO, do somemthing with %@", filename);
  }
}
</pre>

This supports dragging files onto the application icon when it is not running and outside of the dock. Responding to an action, such as dragging some data to the application when the application is not running but in the dock, is left as an exercise for the reader.

If you’re too lazy to set this up (and laziness is a common trait for excellent koders) <a href='http://173.203.83.44/cocoamondo/wp-content/uploads/2008/08/dockdrop.zip'>download this self-contained xCode project</a>.

Happy Koding,]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2008-08-23 19:45:53</wp:post_date>
		<wp:post_date_gmt>2008-08-24 02:45:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>an-introduction-to-handling-dock-icon-drags</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Frugal Applescript iTunes Alarm Clock</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=111</link>
		<pubDate>Wed, 05 Nov 2008 15:23:24 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[Financially these appear to be turbulent times.  Okay that's an understatement.   It's time to cut spending and quit slacking off, so maybe you should start setting your alarm clock instead of rolling into work at noon. What‽‽‽ You don't have an alarm clock‽‽  We'll don't go out and buy one because that would break your new cut the spending rule.  You're a rough and tough Mac koder so why don't you make one yourself?
<ol>
	<li>Create an iTunes playlist called "Wake Up".  Put whatever music you want to wake up to in this playlist.  I recommend Shellac; in particular the <a href="http://petdance.com/actionpark/shellac/discography/futurist/">Futurist</a> LP.</li>
	<li>Write some applescript.</li>
	<li>Call the applescript from a cron.</li>
</ol>

<h3>The Applescript</h3>

In your favourite editor create a file called iTunesAlarm.osascript and give it the following contents.

<pre lang="applescript">
#!/usr/bin/osascript

tell application "iTunes"
	play playlist "Wake Up"
end tell
</pre>

You can test that the script works by running it from the a terminal window.

<h3>The cron entry</h3>

Now add a cron entry in your crontab, using the <strong>crontab -e</strong> command.  I like to put comments in the crontab so I have to do less thinking in the future.

<pre lang="bash">
# minute      hour     day     month     day_of_week
# 0-59        0-23    1-31    1-12    0-6 (sunday = 0)
#
# Run itunes Alarm Monday-Friday at 6:30 AM
30 6 * * 1-5 /Users/mcormier/cron/iTunesAlarm.osascript
</pre>

That's it.  You're done.

If this is too complicated or you feel the need to spend money then you can always try <a href="http://www.embraceware.com/software/awaken/">Awaken.
</a>

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2008-11-05 08:23:24</wp:post_date>
		<wp:post_date_gmt>2008-11-05 15:23:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>a-frugal-applescript-itunes-alarm-clock</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="applescript"><![CDATA[Applescript]]></category>
		<category domain="post_tag" nicename="applescript"><![CDATA[Applescript]]></category>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Presenting the MondoTextField with no Explanation Whatsoever</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=135</link>
		<pubDate>Tue, 09 Dec 2008 03:46:56 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[I've just finished the code for a UI component that I'm releasing as open source.  The component is called the MondoTextField.  I will write a detailed post about this component where I "sweat the details" in the future, but for now I've posted the source code for the uber hackers out there.

<a href="http://github.com/mcormier/mondotextfield/tree/master">http://github.com/mcormier/mondotextfield/tree/master</a>

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2008-12-08 20:46:56</wp:post_date>
		<wp:post_date_gmt>2008-12-09 03:46:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>presenting-the-mondotextfield-with-no-explanation-whatsoever</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sagoo Releases Cambio</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=138</link>
		<pubDate>Wed, 17 Dec 2008 00:21:29 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[Amar Sagoo, who wrote and released <a href="http://amarsagoo.info/namely/">Namely</a> and <a href="http://amarsagoo.info/deepnotes/">Deep Notes</a>, two of my favourite Macintosh applications, has taken the plunge into iPhone application development and written <a href="http://amarsagoo.blogspot.com/2008/12/cambio.html">Cambrio</a>.  <a href="http://amarsagoo.blogspot.com/2008/12/cambio.html">Cambrio</a> is a free unit conversion application for the iPhone platform.

Amar specializes in interaction design and all the applications he writes are very pleasurable to use.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2008-12-16 17:21:29</wp:post_date>
		<wp:post_date_gmt>2008-12-17 00:21:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sagoo-releases-cambio</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphone"><![CDATA[iPhone]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The MondoTextField, a Formal Introduction</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=141</link>
		<pubDate>Sun, 21 Dec 2008 01:36:56 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[ 

<hr />
<h2>The Problem</h2>
 
One of the the UI quirks I noticed when developing <a href="http://sunflower.preenandprune.com">SunFlower</a> is that when trying to present an URL in an inspector panel it is most likely going to be truncated.  Inspector panels by their very nature are small.  They are used as an aid to a larger context and made small so that they don't obscure the main interface.  A full web site address (URL) on the other hand can be very long.  This makes editing a long url in an inspector panel a nuisance.

 

What does Apple do?  Let's take a look at how you edit an external link in iWeb.

 
<img class="aligncenter size-full wp-image-143" title="iweb inspector panel" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/iweb.png" alt="" width="230" height="261" />
 

In the case of iWeb, you must scroll through the text field with the left and right arrow keys. I find this very cumbersome.

This is not the only implementation I've found.  <a href="http://inessential.com/">Brent Simmons</a> of <a href="http://www.newsgator.com/INDIVIDUALS/NETNEWSWIRE/">NetNewsWire</a> fame chose a different approach.  He tackled this issue by using an NSTextView instead of an NSTextField.

 
<img class="aligncenter size-full wp-image-146" title="NetNewsWire inspector panel" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/netnewswire.png" alt="" width="265" height="417" />
 

I prefer Brent's solution to Apple's and that is what has been used in <a href="http://sunflower.preenandprune.com">SunFlower</a> to date. However, in the yet to be released version of <a href="http://sunflower.preenandprune.com">SunFlower</a> I rebuilt the inspector panel to use tabs because I'm doing some redesigning.  So I reconsidered whether I wanted to use an NSTextView and decided I wanted to prototype an interface that I had been pondering.

I wanted something clean and compact like Apple's solution but something that would allow the user to see the entire URL like Brent's solution.

 

<hr />
<h2>The Solution</h2>
 

 

The solution I came up with is to take the concept of <a href="http://www.apple.com/macosx/features/quicklook.html">Quick Look</a> and squish it into a text field; I'm calling it the MondoTextField.  It's not called a QuickLookTextField because you don't just look at the content. With the MondoTextField you look, possibly edit and then close the surrogate window.

<script src="http://www.apple.com/library/quicktime/scripts/ac_quicktime.js" type="text/javascript"></script> <script src="http://www.apple.com/library/quicktime/scripts/qtp_library.js" type="text/javascript"></script>

 
<script type="text/javascript"><!--
	QT_WritePoster_XHTML('Click to Play', 'http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/mondotextfieldvideo-poster.jpg',
		'http://blip.tv/file/get/Mcormier-MondoTextFieldDemo201.m4v',
		'406', '496', '',
		'controller', 'true',
		'autoplay', 'true',
		'bgcolor', 'black',
		'scale', 'aspect');
// --></script>
<noscript>
<object classid="clsid:02bf25d5-8c17-4b23-bc80-d3488abddc6b" width="406" height="496" codebase="http://www.apple.com/qtactivex/qtplugin.cab#version=6,0,2,0"><param name="id" value="movie1" /><param name="src" value="http://blip.tv/file/get/Mcormier-MondoTextFieldDemo201.m4v" /><param name="controller" value="true" /><param name="autoplay" value="false" /><param name="enablejavascript" value="true" /><param name="bgcolor" value="#fff" /><embed id="movie1" type="video/quicktime" width="406" height="496" src="http://blip.tv/file/get/Mcormier-MondoTextFieldDemo201.m4v" bgcolor="#fff" enablejavascript="true" autoplay="false" controller="true"></embed></object>
</noscript>
 

 

<hr />
<h2>Implementation Details</h2>
 

 
<h2>Classes</h2>
To create this component we extend two UI classes (NSTextFieldCell, and NSTextField).  The custom text field cell constrains the width of the cell so that text never appears where the button may appear.  The custom text field manages the button visibility and sends messages to the controller if the button is pushed. There is also an animation class that manages the size of the window during a zoom in or zoom out.

<img class="aligncenter size-full wp-image-176" title="classes" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/classes.png" alt="" />
<h2>Scaling</h2>
To achieve a look similar to Quick Look it is necessary to scale the window when the HUD window zooms in and out.  This means more than just making the frame of the window a different size. It requires scaling the window so that the window, and it's contained elements (title bar, text fields, ...) are all scaled.

 
<img class="aligncenter size-full wp-image-185" title="Scaling Merged" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/merged.jpg" alt="" width="430" height="508" /> 

<style>
.note {
background-color: #F3F6F0;
line-height: 1.3em;
color: #060606;
padding-right: 8px;
padding-bottom: 5px;
padding-left: 8px;
padding-top: 3px;
border-top-width: 1px;
border-bottom-width: 1px;
border-right-width: 1px;
border-left-width: 1px;
border-style: solid;
border-color: #C0C3CF;
margin-left: 1em;
margin-right: 5em;
}

</style>

<del datetime="2009-01-11T23:48:14+00:00">
<h2>Undocumented API's</h2>
</del>

 
<div class="note"><strong>Update - Jan 11th 2009</strong>
MondoTextField has been modified so that it does not use any undocumented API calls by using <a href="http://www.noodlesoft.com/blog/2007/06/30/animation-in-the-time-of-tiger-part-1/">kode</a> published by Paul Kim.</div>
<del datetime="2009-01-11T23:49:09+00:00">
Although the scaling animation seems like a job for core animation, it is not possible to scale a window with core animation.  To do this we need to use undocumented API's.</del>
<pre lang="c">extern OSStatus
CGSGetWindowTransform(const CGSConnection,
                         CGSWindow wid,
                         CGAffineTransform *outTransform);

extern OSStatus
CGSSetWindowTransform(const CGSConnection cid,
                         CGSWindow wid,
                         CGAffineTransform transform);</pre>
<del datetime="2009-01-11T23:49:09+00:00">
For more information on these undocumented API's take a look at the sample project that <a href="http://lipidity.com/apple/core-graphics-meet-core-image-demo-app/">lipidity.com</a> released over two years ago.
</del>
<div class="note"><del datetime="2009-01-11T23:49:09+00:00">
<strong>A note about undocumented API's.</strong> 

Apple obviously does not recommend that you use undocumented API's. They recommend that you make a feature request, and wait for the API call to become officially available (which could be never).  I do not encourage the use of undocumented API's and am only using it in this case because I feel the benefits of using it far outweigh the risk and maintenance of future changes.

</del></div>
<del datetime="2009-01-11T23:50:14+00:00">
There is nothing stopping you from using the API's once they are discovered, however your application could break with even a minor release of the operating system.  These particular API's have been available and undocumented since 10.4 (I believe) and I doubt that will change anytime soon as  Apple appears to be too busy working on the iPhone version of Mac OS X.
<del datetime="2009-01-11T23:51:09+00:00">
If you decide to use the MondoTextField in your application then you should understand that there is some risk associated with using it.</del>
</del>

 

<hr />
<h2>Design Decisions</h2>
 

 

It is important to note that the button appears just before the text field is completely filled.  When the button is not visible and text reaches the left of where the button will be, the button appears.  Although this decreases the available space for displaying text in some cases I felt it was a better solution then using the button area temporarily and then shifting the text over when the button needs to be displayed.  This was a conscious design decision.

Another issue I considered was how would users react with a button inside of a text field?  The short answer is, <em>Apple does it so it must be okay</em>. Seriously though, it appears to be a fairly standard practice to put buttons in text fields these days.  In the Safari address field there are sometimes even multiple buttons.  Below is an example of Safari with a "Snapback" button and a "RSS" feed button.

 
<a href="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/safaributtons.jpg"><img class="alignnone size-medium wp-image-205" title="safari text field buttons" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/safaributtons-300x90.jpg" alt="" width="300" height="90" /></a>
 

 

<hr />
<h2>Conclusion</h2>
 
I hope you find this component useful and am interested in any feedback as I am planning on adding it to the next version of <a href="http://sunflower.preenandprune.com">SunFlower</a>.

 

You can get the code by downloading <a href="http://www.preenandprune.comcocoamondo/wp-content/uploads/2009/01/mondotextfieldv2.zip">this self-contained xCode project</a>, or you can access it through <a href="http://github.com/mcormier/mondotextfield/tree/master">github</a>.

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2008-12-20 18:36:56</wp:post_date>
		<wp:post_date_gmt>2008-12-21 01:36:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-mondotextfield-a-formal-introduction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://blip.tv/file/get/Mcormier-MondoTextFieldDemo201.m4v
1057165
video/mp4]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Mac Developer Network &raquo; Blog Archive &raquo; MondoTextField]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://new.mac-developer-network.com/code/mondotextfield/</wp:comment_author_url>
			<wp:comment_author_IP>67.207.148.63</wp:comment_author_IP>
			<wp:comment_date>2008-12-22 03:34:05</wp:comment_date>
			<wp:comment_date_gmt>2008-12-22 10:34:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] View Details [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Rob Keniger]]></wp:comment_author>
			<wp:comment_author_email>rob@menumachine.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.108.175.48</wp:comment_author_IP>
			<wp:comment_date>2009-01-03 20:05:37</wp:comment_date>
			<wp:comment_date_gmt>2009-01-04 03:05:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You don't need to use private APIs to do the window animation. The way I do this is to cache the content view of the window to an image. I then replace the content view of the window with an NSImageView with the cached image as its content. You can then just do an NSViewAnimation with the window to scale it from the small size to the large size and replace the content view when it hits full size.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Matthieu Cormier]]></wp:comment_author>
			<wp:comment_author_email>mcormier@cs.dal.ca</wp:comment_author_email>
			<wp:comment_author_url>http://allusions.sourceforge.net</wp:comment_author_url>
			<wp:comment_author_IP>142.176.124.16</wp:comment_author_IP>
			<wp:comment_date>2009-01-05 07:44:28</wp:comment_date>
			<wp:comment_date_gmt>2009-01-05 14:44:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the info Rob.  I will definitely revise MondoTextField in the future so that it does not use a private API call.  Paul Kim dropped me a line and let me know of a technique on of how to do this that he posted a while ago.

http://www.noodlesoft.com/blog/2007/06/30/animation-in-the-time-of-tiger-part-1/

So if you want to use MondoTextField but don't like using a private call then you can take his example and merge it with the MondoTextField.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[The MondoTextField, a Formal Introduction | BIG PLUG.COM]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://bigplug.com/news/2009/01/25/the-mondotextfield-a-formal-introduction/</wp:comment_author_url>
			<wp:comment_author_IP>74.124.211.5</wp:comment_author_IP>
			<wp:comment_date>2009-01-25 09:45:53</wp:comment_date>
			<wp:comment_date_gmt>2009-01-25 16:45:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Cocoa Mondo: “One of the the UI quirks I noticed when developing SunFlower is that when trying to present an URL in an inspector panel it is most likely going to be truncated&#8230; This makes editing a long url in an inspector panel a nuisance.” [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Cocoa Mondo - Koo ka kachoo &raquo; Blog Archive &raquo; SunFlower 0.11 Released]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sunflower.coleharbour.ca/cocoamondo/2009/04/sunflower-011-released/</wp:comment_author_url>
			<wp:comment_author_IP>67.210.123.35</wp:comment_author_IP>
			<wp:comment_date>2009-04-18 05:23:54</wp:comment_date>
			<wp:comment_date_gmt>2009-04-18 12:23:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Clicking the blue button summons a window where you can see the full text. You can edit the text in this other window. If you are interested in the design process for this interface you can read more about it here. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>MondoTextField Updated.  No longer uses private API calls.</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=311</link>
		<pubDate>Mon, 12 Jan 2009 01:06:30 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks go to Paul Kim of <a href="http://www.noodlesoft.com/">NoodleSoft</a> for informing me about <a href="http://www.noodlesoft.com/blog/2007/06/30/animation-in-the-time-of-tiger-part-1/">kode</a> he wrote to zoom a window.  The <a href="http://www.preenandprune.com/cocoamondo/?p=141">MondoTextField</a> has been updated so that it no longer uses private API calls.

You can get the code by downloading this <a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/01/mondotextfieldv2.zip">self-contained xCode project</a>, or you can access it through <a href="http://github.com/mcormier/mondotextfield/tree/master">github</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2009-01-11 18:06:30</wp:post_date>
		<wp:post_date_gmt>2009-01-12 01:06:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>mondotextfield-updated-no-longer-uses-private-api-calls</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Image Visualization to Find the Perfect Pad</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=322</link>
		<pubDate>Mon, 26 Jan 2009 00:51:00 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[I've decided to move recently and I decided it was important to walk to the grocery store. I also took the location and plugged it into <a href="http://www.walkscore.com/">walkscore.com</a>. To make it easy to quickly determine how easy it was to walk to a grocery store I created the following image.

<center><a href="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/01/grocerystores.jpg"><img class="alignnone size-thumbnail wp-image-324" title="grocerystores" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/01/grocerystores-150x150.jpg" alt="" width="150" height="150" /></a></center>The center of each circle represents a grocery store. The entire circle represents where it would be convenient to walk to that grocery store. This is fairly subjective and I thumbed it. It also doesn't take into account hills, and less pedestrian friendly roads, but it does provide a quick and easy way to determine if a location is close to a super market.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2009-01-25 17:51:00</wp:post_date>
		<wp:post_date_gmt>2009-01-26 00:51:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>using-image-visualization-to-find-the-perfect-pad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="user-interface"><![CDATA[User Interface]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Little Things, Like Good documentation</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=433</link>
		<pubDate>Mon, 20 Apr 2009 19:28:19 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=433</guid>
		<description></description>
		<content:encoded><![CDATA[Over time having good documentation can have subtle effects on the flow of what you produce in an environment and how enjoyable it is to program for that environment.  As someone who programs in Java and in Cocoa it seems worth it to point out the differences in how the API documentation is laid out.   I'm gonna explain why Apple's Cocoa docs are better than Sun's (uh, I mean Oracle's) Java docs, and why I always dread having to look something up in the Java API.

We will be comparing <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JWindow.html">JWindow</a> with <a href="http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSWindow_Class/Reference/Reference.html">NSWindow</a>. Both documentation sources are created with document genertation tools.  Apple uses <a href="http://developer.apple.com/opensource/tools/headerdoc.html">HeaderDoc</a> for their API and Sun (errr, Oracle) uses <a href="http://java.sun.com/j2se/javadoc/">JavaDoc</a> for their API.

<h3>Method Overview</h3>

The first noticeable and most important difference is the method overview for each.  Java documentation is in alphabetical order.  Cocoa documentation has been organized into logical groups.  Organization is important because the most common thing you do as a programmer is look for a method that does what you want to do.  When you are unfamiliar with the methods on a class or haven't used the class for a while all you know is "I want to do X".  Grouping the methods into categories of actions makes it easier for the uninitiated to find what they are looking for.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/04/javamethods.gif" alt="" title="javamethods" width="402" height="419" class="alignnone size-full wp-image-436" border=2/>
Method documentation in Java
</center>
<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/04/cocoamethods.gif" alt="" title="cocoamethods" width="354" height="419" class="alignnone size-full wp-image-439" border=2/>
Method documentation in Cocoa
</center>
You might be thinking <em>"Hey, wait a minute, the cocoa documentation looks cleaner but where are the method parameters, return types and method description?" </em> The method parameters and return types aren't that important when you're looking for what will do the job.  If you need to know them you can click on the method to get more detailed information.  The method description is important and is displayed when you mouseover the method link.  By removing visual clutter the Cocoa documentation makes it easier to find what you need.
<center>
<img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/04/cocoamouseover.jpg" alt="" title="cocoamouseover" width="414" height="184" class="alignnone size-full wp-image-442" border=2/>
Displaying a method description with a mouseover
</center>

<h3>Super class methods</h3>

Super class methods are handled differently also.  In Cocoa, they simply aren't there. If you want to see the methods on the super class then you must navigate to the definition of the super class. In JavaDoc, however, there is a less than useful dump of all the methods of all the super classes in a highly unreadable form.  This can create a lot of visual garbage that you have to scroll over.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/04/readable.jpg" alt="" title="readable" width="348" height="232" class="alignnone size-full wp-image-446" border=2 />
A summary of super class methods in JavaDoc</center>


<h3>Conclusion</h3>

The point here is a point that has been made in the past <a href="http://queue.acm.org/detail.cfm?id=1255422">"API Design Matters"</a>. Not only should it be well documented, but that documentation should be an easy to use reference.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date>2009-04-20 12:28:19</wp:post_date>
		<wp:post_date_gmt>2009-04-20 19:28:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-little-things-like-good-documentation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
		<category domain="category" nicename="user-interface"><![CDATA[User Interface]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Core Data Migration</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=468</link>
		<pubDate>Fri, 19 Jun 2009 01:07:56 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=468</guid>
		<description></description>
		<content:encoded><![CDATA[One of the wonderful things about Core Data is that it provides a versioning mechanism that makes it easier to migrate your data if the model has changed from release to release. Apple has a guide called the <a href="http://developer.apple.com/documentation/Cocoa/Conceptual/CoreDataVersioning/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004403">"<em>Core Data Model Versioning and Data Migration Programming Guide</em>" </a> with useful info on this.

To use Core Data versioning support you need to be using Mac OS X v10.5 and your model file needs to be a <code>.xcdatamodeld</code> file type. That last "<strong>d</strong>" in the file type stands for directory; and it's a directory that contains<code> .xcdatamodel</code> files.
<div class="note"><strong>Update: </strong> If Mac OS X v10.6 is your baseline target operating system you should try <a href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/CoreDataVersioning/Articles/vmLightweight.html">lightweight migration</a> instead of following this article. Use the new <a href="http://developer.apple.com/mac/library/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSPersistentStoreCoordinator_Class/NSPersistentStoreCoordinator.html#//apple_ref/doc/c_ref/NSInferMappingModelAutomaticallyOption">NSInferMappingModelAutomaticallyOption</a> migration option.</div>
<center><img class="alignnone  wp-image-481" style="border: 2px solid black;" title="modeld" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/06/modeld.png" alt="modeld" border="2" /></center>Once you've created more than one version of your model you should support migrating old versions of the model to the new version. You can do this by passing the <code>NSMigratePersistentStoresAutomaticallyOption</code> option to <code>NSPersistentStoreCoordinator</code> when adding the persistent store and by creating a mapping model.
<pre lang="objc">NSDictionary *optionsDictionary =
[NSDictionary
      dictionaryWithObject:[NSNumber numberWithBool:YES]
      forKey:NSMigratePersistentStoresAutomaticallyOption];

NSPersistentStore* store = [persistentStoreCoordinator
       addPersistentStoreWithType:NSXMLStoreType
       configuration:nil
       URL:url
       options:optionsDictionary
       error:&amp;error];

if( store == nil ) {
    [[NSApplication sharedApplication] presentError:error];
    [[NSApplication sharedApplication] terminate:self];
}</pre>
Core Data will now magically convert the data from version 1 to version 2, if necessary when the program loads. You and your users will be happy. Everything is hunky-dory.

<center><img class="alignnone  wp-image-489" title="mappingModel1" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/06/mappingModel1.jpg" alt="mappingModel1" /></center>
<h3>Where's the Beef?</h3>
So far I've simply summarized Apple's documentation. What kind of blog is this anyway?

Well, automatic migration isn't completely automatic. Let's add a third version of the data model with another model mapping and see what happens.

<center><img class="alignnone  wp-image-493" title="mappingmodel2" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/06/mappingmodel2.jpg" alt="mappingmodel2" /></center>Okay, we've added a data model and a mapping model to that data model from the previous. We've set version three as the current version of the data model and now have two test cases to try.
<ul>
	<li><strong>Case 1</strong>: Run with version 1 data and see if migration works</li>
	<li><strong>Case 2</strong>: Run with version 2 data and see if migration works</li>
</ul>
Testing shows that case 1 fails and case 2 passes. Case 1 fails because the automatic migration logic provided by Apple is very simple. It looks for a mapping model from the ol to the new version. If it can't find one then it stops.

<center><img class="alignnone  wp-image-498" title="mappingmodel3" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/06/mappingmodel3.jpg" alt="mappingmodel3" /></center>To solve this problem you can modify the mapping from version 1 to 2 to go from version 1 to 3. The problem with this solution is that as you get more versions of your data model you will have to modify more mapping models. To be specific, if you have N data models you will need to configure N - 1 mapping models.
<h3>Custom Migration</h3>
When N is large then so is N - 1, so modifying all those mapping models when we added one data model probably isn't the greatest solution; especially if we only added one attribute. We need custom migration code.

<center><img class="alignnone  wp-image-505" title="mappingmodel4" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/06/mappingmodel4.jpg" alt="mappingmodel4" /></center>First we need to modify the appDelegate class in the standard Core Data generated project to use a migration class. We'll create a migration object and tell it to do the migration if it needs to be done.
<pre lang="objC">SFMigrationManager* migrator = [[SFMigrationManager alloc]
      initWithModelName:@"SunFlower_DataModel"
      andXMLStoreURL:url];

BOOL latestVersion = [migrator migrateIfNeeded:&amp;error];
[migrator release];

if ( latestVersion ) {
  store = [persistentStoreCoordinator
           addPersistentStoreWithType:NSXMLStoreType
           configuration:nil
           URL:url
           options:nil
           error:&amp;error];
}

if (! latestVersion || store == nil){
  [[NSApplication sharedApplication] presentError:error];
  [[NSApplication sharedApplication] terminate:self];
}</pre>
Let's take a look at the <code>init</code> method for the class. The <code>init</code> method loads all the object models and figures out what model version the store is.
<pre lang="objC">#define SFAssign(oldValue,newValue) \
  [ newValue retain ]; \
  [ oldValue release ]; \
  oldValue = newValue;

- (id)initWithModelName:(NSString*)name
      andXMLStoreURL:(NSURL*)url {

  if ( (self = [super init]) ){
    SFAssign(storeURL, url);

    if ( ! [self loadObjectModels:name] ||
         ! [self determineModelVersion] ) {
      [self release];
      return nil;
    }
  }

  return self;
}</pre>
The object models are loaded by loading the file VersionInfo.plist, which is embedded in your applications bundle, and getting a dictionary of NSManagedObjectModel_VersionHashes. Dictionaries are not ordered so we need to sort the dictionary and then finally we create <code>NSManagedObjectModel</code> objects and put them in an array in their sorted order.
<pre lang="objC">-(BOOL)loadObjectModels:(NSString*)modelName {

  NSString* momdPath = [[NSBundle mainBundle] pathForResource:modelName ofType:@"momd"];
  NSBundle* modelBundle = [NSBundle bundleWithPath:momdPath];
  NSString* plistPath = [modelBundle pathForResource:@"VersionInfo" ofType:@"plist"];
  NSData* plistData = [NSData dataWithContentsOfFile:plistPath];
  NSString *error;

  NSDictionary* versionInfo = [NSPropertyListSerialization propertyListFromData:plistData
                                                 mutabilityOption:NSPropertyListImmutable
                                                           format:NULL
                                                 errorDescription:&amp;error];
  if ( error ) {
    NSLog(@"An error occurred retrieving versionInfo --&gt; %@", error);
    return NO;
  }

  NSDictionary* versionDict = [versionInfo valueForKey:@"NSManagedObjectModel_VersionHashes"];

  objectModels = [[NSMutableArray alloc] initWithCapacity:[versionDict count]];
  NSArray* sortedMomList = [[versionDict allKeys] sortedArrayUsingFunction:nameSort context:NULL];

  for (NSString* modelName in sortedMomList) {
    NSString* modelPath = [modelBundle pathForResource:modelName ofType:@"mom"];
    NSManagedObjectModel* model =
         [[NSManagedObjectModel alloc] initWithContentsOfURL: [NSURL fileURLWithPath: modelPath]];
    [objectModels addObject:model];
    [model release];
  }

  return YES;
}</pre>
Determining the model version of the persistent store is as simple as iterating through the array of ordered object models until we find the correct one.
<pre lang="ObjC">-(BOOL)determineModelVersion {
  NSError* error;
  NSDictionary *storeMetadata = [NSPersistentStoreCoordinator
                                 metadataForPersistentStoreWithURL:storeURL
                                 error:&amp;error];
  if ( ! storeMetadata ) {
    return NO;
  }

  for( NSManagedObjectModel* model in objectModels ) {
    if ([model isConfiguration:nil compatibleWithStoreMetadata:storeMetadata] ) {
      currentStoreModel = [objectModels indexOfObject:model];
      return YES;
    }
  }

  return NO;
}</pre>
Finally, here is the core of the migration class that incrementally converts the persistent store to the latest version.
<pre lang="objC">- (BOOL)migrationNeeded {
  return ! ( currentStoreModel == [objectModels count] );
}

- (BOOL)migrateIfNeeded:(NSError**)error {

  if ( ! [self migrationNeeded] ) {
    return YES; }

  // Backup the store before we do anything
  NSString* backupFilePath = [[storeURL path] stringByAppendingString:@".backup"];
  if( ![self overWriteCopy:[storeURL path] to:backupFilePath error:error] ) {
    return NO;
  }

  NSDictionary *opts =
  [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:YES]
                              forKey:NSMigratePersistentStoresAutomaticallyOption];
  NSInteger i;
  NSURL* tempURL = [NSURL fileURLWithPath:[[storeURL path] stringByAppendingString:@".temp"]];

  for( i = currentStoreModel; i &lt; [objectModels count] - 1; i++ ) {     // Migrate the store to a temp file.     // SunFlower.xml --&gt; SunFlower.xml.temp
    BOOL migrationSuccess = [[self migrationManagerForIndex:i]
                               migrateStoreFromURL:storeURL type:NSXMLStoreType options:opts
                               withMappingModel:[self mappingModelForIndex:i]
                               toDestinationURL:tempURL
                              destinationType:NSXMLStoreType destinationOptions:opts
                               error:error];

    // Revert and return if:
    // 1.) The migration failed.
    // 2.) The temp file could not be copied over the original.
    // 3.) The temp file could not be deleted.
    if (! migrationSuccess ||
        ! [self overWriteCopy:[tempURL path] to:[storeURL path] error:error] ||
        ! [[NSFileManager defaultManager]  removeItemAtPath:[tempURL path] error:error]) {
      // Revert to backup file and exit
      // Not passing an error because we want to propogate the previous error.
      [self overWriteCopy:backupFilePath to:[storeURL path]  error:NULL];
      return NO;
    }
  }

  return YES;
}</pre>
Happy Koding!]]></content:encoded>
		<excerpt:encoded><![CDATA[One of the wonderful things about Core Data is that it provides a versioning mechanism that makes it easier to migrate your data if the model has changed from release to release.  Apple has a guide called the <a href="http://developer.apple.com/documentation/Cocoa/Conceptual/CoreDataVersioning/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004403">"<em>Core Data Model Versioning and Data Migration Programming Guide</em>" </a> with useful info on this.]]></excerpt:encoded>
		<wp:post_id>468</wp:post_id>
		<wp:post_date>2009-06-18 18:07:56</wp:post_date>
		<wp:post_date_gmt>2009-06-19 01:07:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>core-data-migration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="core-data"><![CDATA[Core Data]]></category>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Ripple Effect</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=582</link>
		<pubDate>Sat, 25 Jul 2009 17:11:16 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=582</guid>
		<description></description>
		<content:encoded><![CDATA[Software by it's very nature, tends towards complexity.

When a program is in it's infancy, with few features and few lines of code, adding a new feature can usually be done quickly.  As the program evolves adding a new feature may still be quick and easy but it may cause side effects in other parts of a program.  So adding the new feature may not take long but adjusting the rest of the program so that everything flows properly will take time.

Think of stable software as a calm pond, with a surface smooth as glass and adding a feature is like throwing a pebble in that pond, which causes ripples that need to be dealt with. One of the things that distinguishes a junior from a senior programmer is that the junior programmer will not foresee these ripples and will think he has completed his task prematurely.

To illustrate what I'm talking about I'm going to talk about a new feature that will be in the next <a href="http://sunflower.preenandprune.com">SunFlower</a> release.

<h3>The Problem</h3>

Snapshots in SunFlower can pile up, and eventually you need to delete some.  To delete a snapshot you must control-click on the snapshot and choose delete.
<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/07/rightClick.png" alt="rightClick" title="rightClick" width="243" height="176" class="alignnone size-full wp-image-588" /></center>

This interface works but is kludgey.  It's not convenient when you need to delete many snapshots because control-clicking on each snapshot is slow and cumbersome.  There is definitely room for improvement in this interface.

<h3>The Solution</h3>

The solution is simple. Add a delete button that appears when the user positions the mouse over the snapshot.  This is an established interface, it's how Safari deals with the close buttons for tabs without making the interface feel cluttered.

<center>
<img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/07/mouseOver.png" alt="mouseOver" title="mouseOver" width="461" height="182" class="alignnone size-full wp-image-599" />
</center>

<h3>The Ripples</h3>

So what were some of the ripples caused by adding the delete button?

Because the user can navigate the snapshots with the keyboard, we need to detect if the mouse is over a snapshot after keyboard events.  We cannot simply use mouse move events to detect if the delete button should be shown.  <em><strong>((Ripple.))</strong></em>

In this case most of the ripples were design based.  Snapshots have a state of being "read" or "unread",  and an image is displayed on the top right corner when the snapshot is brand new.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/07/ripples.png" alt="ripples" title="ripples" width="236" height="173" class="alignnone size-full wp-image-601" /></center>

Having two images represent different things with varying red colours is not good.  So the unread marker image now needs to be changed. <em><strong>((Ripple.))</strong></em>  I could change the colour of the unread image to green but I'd prefer that both images weren't the same shape to prevent confusion.  <em><strong>((Ripple.))</strong></em>  The delete button has nice shading and puts the unread marker image to shame so the ante has been upped.  <em><strong>((Ripple.))</strong></em>

<h3>Addendum (Aug 03 2009)</h3>
Brent Simmons describes this concept in <a href="http://inessential.com/2009/07/30/anatomy_of_a_feature">more detail in a recent blog posting.</a>

<blockquote>It’s not enough just to write the basic functionality and add a menu item that runs it. Even a feature as simple as this one requires some up-front thinking, some design.</blockquote>
...
<blockquote>The code behind the feedback window is, again, bigger than the http-call code. (By now you’ve gotten the idea that the core functionality of a feature is often the very smallest part.)</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>582</wp:post_id>
		<wp:post_date>2009-07-25 10:11:16</wp:post_date>
		<wp:post_date_gmt>2009-07-25 17:11:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-ripple-effect</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<category domain="category" nicename="user-interface"><![CDATA[User Interface]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simulating the open command in cygwin</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=618</link>
		<pubDate>Wed, 05 Aug 2009 18:56:01 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=618</guid>
		<description></description>
		<content:encoded><![CDATA[You may or may not be familiar with the <a href="http://ss64.com/osx/open.html">open command</a> in the terminal application.  With the open command you can type
<strong>"open ."</strong>
at the command line and a Finder window will appear.  You can also type
<strong>"open &lt;filename&gt;"</strong>
 and the file will be opened with it's associated application, as if you double clicked on it from the finder.

Now suppose you're a Mac aficionado using Windows.  You've installed <a href="http://www.cygwin.com/">Cygwin</a> to gain access to the power of Unix but you miss the open command.  The following script can help you out.

<pre lang="bash">
#!/usr/bin/bash

if [ -z "$1" ] ; then
  echo "I'm hungry give me a parameter."
  exit
fi

PARAM=`cygpath --dos --absolute "$1"`

/cygdrive/c/Windows/explorer.exe $PARAM &
</pre>

<strong>UPDATE:</strong> Or you can alias the <strong>cygstart </strong>command in your .bashrc file as this <a href="http://stackoverflow.com/questions/577595/open-a-file-from-cygwin" >stackoverflow posting explains</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>618</wp:post_id>
		<wp:post_date>2009-08-05 11:56:01</wp:post_date>
		<wp:post_date_gmt>2009-08-05 18:56:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>simulating-the-open-command-in-cygwin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Opening a .webloc file in Windows</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=633</link>
		<pubDate>Fri, 20 Nov 2009 20:47:23 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=633</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>An Exploration of Cocoa on Windows</h3>
<h4>The problem</h4><br>

I have a habit of dragging addresses from the Safari address bar to my desktop on my Mac.  Eventually these web link files pile up and things become unmanageable.  Since I use dropbox, I decided to do a reboot by copying all of these files to a dropbox folder.   Then when I had free time and was sitting in front of a Windows machine that was also using dropbox I could do some reading.

<em>"Safari is on Windows, it must read .webloc files"</em>, I naively thought.  When I got to my Windows machine and had some free time I discovered that Windows Safari does not read .webloc files.  The .webloc file was in a binary format.  Opening the webloc file in vi showed some goobly-gook (binary data) and the URL string floating in binary data.  I could have easily copied the URL in vi and pasted it into the address bar, but  I'd gone this far and a program was demanding to be written.

So a .webloc file is stored as a binary plist, and reading a plist file is simple in Cocoa.  This was the perfect excuse for writing an Objective-C program in Windows.

Be forewarned.  Unlike my regular posts which I try to keep focused and to the point this one does go off on a tangent.

If you want to just skip ahead and read the kode then take a look at the following two gitHub repositories:
<ul><li><a href="http://github.com/mcormier/lilac">lilac</a> (pure cygwin implementation)</li><li><a href="http://github.com/mcormier/lilacStep">lilacStep</a> (a GNUStep implementation)</li></ul>

<h4>Where to Start?</h4><br>
In a <a href="http://www.preenandprune.com/cocoamondo/?p=635">previous posting</a> I explained how to write a simple Objective-C program in Windows.  The main benefits of using Objective-C on the Macintosh are:
<ol><li>It's object oriented</li>
<li>The frameworks/libraries provided</li>
<li>It's not as ugly as C++</li>
</ol>

The frameworks and libraries are particularly important.  Learning new frameworks takes time, and being able to leverage a familiar framework can save time.  Frameworks can also be designed poorly making them hard to use.  Lots of methods with too many parameters for example.

<pre lang="Cplusplus">
BOOL WINAPI CreateProcess(
  __in_opt     LPCTSTR lpApplicationName,
  __inout_opt  LPTSTR lpCommandLine,
  __in_opt     LPSECURITY_ATTRIBUTES lpProcessAttributes,
  __in_opt     LPSECURITY_ATTRIBUTES lpThreadAttributes,
  __in         BOOL bInheritHandles,
  __in         DWORD dwCreationFlags,
  __in_opt     LPVOID lpEnvironment,
  __in_opt     LPCTSTR lpCurrentDirectory,
  __in         LPSTARTUPINFO lpStartupInfo,
  __out        LPPROCESS_INFORMATION lpProcessInformation
);
</pre>
<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/ms682425(VS.85).aspx">CreateProcess Reference</a></li>
<li><a href="http://queue.acm.org/detail.cfm?id=1255422">API Design Matters</a></li>
</ul>

Even if a framework is designed well, if the documentation for that framework is poor then learning how to use that framework will still be tedious.  Without proper documentation, you will need to experiment with method calls more which will take more time.

The framework that we're talking about here is obviously Cocoa.  All those classes that make Objective-C programming fun like NSString and NSData.  So what options do we have for using Cocoa on Windows?
<ol><li><a href="http://www.cocotron.com/">Cocotron</a></li>
<li><a href="http://www.gnustep.org/">GnuStep</a></li>
<li>Build your own</li>
</ol>

I decided to first start with Cocotron so I downloaded the latest source code.  However, Cocotron can only be built through XCode on Mac OS X.  Since I'm trying to do the build directly from Windows this was a non-starter but I figured having the source code handy would be a good idea.

Initially I stayed away from GNUStep because I was unsure of the licensing. I also already have a highly customized Cygwin environment so was hesitant in using GNUStep because it uses <a href="http://www.mingw.org/">minGW</a> and that would be another environment to customize and maintain.  Later I did look into GNUStep and ported my implementation to GNUStep easily.

As far as GNUStep licensing is concerned it uses GPL and LGPL so it should be safe to link to and distribute a binary.  However, I am not a lawyer and have yet to find a good explanation of the licensing terms.  There is no clear document that I could find in the GNUStep installation or website that states that GNUStep uses LGPL.  I determined that GNUStep is LGPL by the description on <a href="http://en.wikipedia.org/wiki/Gnustep">wikipedia</a> and by looking at the license inside the header files (<strong>/GNUstep/System/Library/Headers</strong>).  Documentation is not fun work, but the organization of the GNUStep documentation is particularly scatterbrained.

So with the constraint of doing the build purely in Windows, Cocotron was not an option. I decided to stay away from GNUStep temporarily so what option did that leave me with?  Surely I wasn't going to build my own Cocoa framework.  That would be pure folly.

<h4>Core Foundation</h4><br>
Well there was another option I didn't mention, Core Foundation. Like the Objective-C runtime, Apple has been releasing their Core Foundation library as open source for some time now. Core Foundation is not Objective-C kode, it is pure C, however the names of the C structures are eerily similar to some Objective-C foundation classes.  Core Foundation has a CFStringRef (NSString), CFArrayRef(NSArray), etc.  So it didn't seem far fetched to write Objective-C wrappers for these C data structures.

I downloaded and compiled Core Foundation, which was a little bit more difficult than I expected.  Like the <a href="http://www.preenandprune.com/cocoamondo/?p=663">Objective-C runtime</a> the build is not always verified to see if it works in Windows so some massaging is required.  If you are interested in doing this then check out the links below this paragraph.  Building Core Foundation is a good exercise, because it will help familiarize you with the library if you read some of the kode.  Now that I've built it however, I will just grab a copy out of a Safari installation because it's just plain easier.
<ul>
<li><a href="http://developer.apple.com/opensource/cflite.html">Creating Cross-Platform Applications with Core Foundation and Open Source</a></li>
<li><a href="http://karaoke.kjams.com/wiki/CFLite">More recent instructions on building Core Foundation</a></li>
</ul>

Once I decided to write Objective-C wrappers for Core Foundation I wondered if that was what Cocotron did.  So I looked at the CocoTron kode and discovered that CocoTron does not rely on Core Foundation. This surprised me because it went completely against my lazy programmer instincts.  Why reinvent the wheel?  You have this highly tested kodebase that you can use but you're going to rewrite it?

Eventually Christopher Lloyd did explain that Cocotron does not use Core Foundation because of some philosophical issues with regard to the APSL (Apple Software License Agreement).
<ol><li>If you modify any APSL kode you must clearly mark what you modified.</li>
<li>Apple has the right to terminate the APSL.</li></ol>

Christopher believes that issue #1 would be a long term hassle.  Personally I just wouldn't modify any APSL kode unless there were no other options.  Fix any issues with the kode in the wrapper layer, or provide an alternative implementation if the APSL kode doesn't work properly.

Issue #2 is nothing to get your feathers ruffled about.  Sure it sounds pretty nasty but this is a corporate cover your ass clause.  Apple has been releasing stuff under APSL for 10 years now and I have not heard of them terminating the license on anything.  I can see this clause only being used in exceptional circumstances because the PR backlash it would generate in the programmer world (general consumers couldn't care less) could be big.

Here are some interesting links. If you're smart enough to read then you're smart enough to think. Make up your own mind about the APSL.

<ul><li><a href="http://groups.google.com/group/cocotron-dev/browse_thread/thread/8d9b9ae9b9c17c8d/cff964c9398a8868?lnk=gst&q=matthieu#cff964c9398a8868">Why doesn't Cocotron use Core Foundation? (Part 1)</a></li>
<li><a href="http://stackoverflow.com/questions/56708/objective-c-for-windows/1683163#1683163">Why doesn't CocoTron use Core Foundation? (Part 2)</a></li>
<li><a href="http://www.gnu.org/philosophy/apsl.html">FSF's Opinion of the Apple Public Source License</a></li>
<li><a href="http://lists.spi-inc.org/pipermail/spi-general/1999-April/000276.html">APSL 1.1 certification... [talking with the lawyers]</a></li></ul>

<h4>The implementation</h4><br>

So the stage has been set and now you know the actors. I decided to call the program <a href="http://github.com/mcormier/lilac">lilac</a> for lack of a better name.  I first wrote lilac in pure C with Core Foundation to read the .webloc file as a plist and print out the URL value to the console.  This was very easy as Apple has the kode to read a plist file with Core Foundation <a href="http://developer.apple.com/opensource/cflite.html">here</a>.  Then I figured out how to read the default web browser from the registry (fun) and open a link in the default browser (see <a href="http://github.com/mcormier/lilac/blob/8af4f3db5353fdfc56b66374e74c983b70d4d5f4/src/mondoWin32/WinHelper.m">mondoWin32/WinHelper.m</a>).

After the core logic was built I started implementing it in Objective-C.  I created only the Cocoa objects that I needed, with the methods that I needed and put these source files in a directory called <a href="http://github.com/mcormier/lilac/tree/master/src/cocoaLite/">cocoaLite</a>.  I copied what code I could from CocoTron but some of the logic is obviously different since I was plugging into Core Foundation.

In the end I really only created NSString and NSArray, but this was enough for me to prove that it could be done.  Since the application I was creating is very short-lived (it reads a file and passes an URL to a browser and then dies), there was no need to support memory management (retain, release, pools).

<h4>How NSString Works</h4><br>

The trickiest part of the implementation was getting NSString working, and the Cocotron kode was very helpful in this regard.  Actually the trickiest part was sitting down and learning how to write a <a href="http://www.gnu.org/software/make/manual/make.html">makefile</a> but that was more patience and reading than anything else; I had been avoiding that for years anyway.

To get @"" string constants to work you need to do the following:

<ol>
<li>Add <a href="http://github.com/mcormier/lilac/blob/master/build/makefile#L24"><strong>-fconstant-string-class=NSConstantString</strong></a> to your compile and link options.</li>
<li>Define <a href="http://github.com/mcormier/lilac/blob/master/src/cocoaLite/NSString/NSString.m#L7">NSString as an abstract class that dishes out a different concrete class in the alloc method. No variables can be defined in </a>NSString. This is because NSConstantString will be extending NSString and the compiler requires a specific variable structure for constant-string-class.</li>
</ol>

<pre lang="objc">
@implementation NSString

// NSString is a stub class that creates another class
// that extends NSString.  We need to do this
// so that the variable signature does not interfere
// with NSConstantString which allows us to use @"blah"
// to construct strings.
+ (id)alloc {
  return (id)class_create_instance([NSStringCF class]);
}
</pre>

<ol>
<li>Create an <a href="http://github.com/mcormier/lilac/blob/master/src/cocoaLite/NSString/NSString.h#L53">NSConstantString</a> class that extends NSString</li>
</ol>

<pre lang="objc">
@interface NSConstantString: NSString {
  char *c_string;
  unsigned int len;
}
</pre>

<ol>
<li>Create an <a href="http://github.com/mcormier/lilac/blob/master/src/cocoaLite/NSString/NSStringCF.m">NSStringCF</a> class that extends NSString and works as a wrapper for a Core Foundation CFStringRef.Because you're going to need a non-constant implementation of NSString.</li>
</ol>
So I defined NSString, and NSArray, and I could have implemented NSData but I didn't. I felt I had gotten a good feeling as to how much work was required to create Objective-C wrappers for all the Core Foundation objects; a lot.

Later I followed <a href="http://www.jayson.in/programming/objective-c-programming-in-windows-gnustep-projectcenter.html">a tutorial</a> on how to install GNUStep and create a HelloWorld application.  The installation for GNUStep strikes me as odd.  You have to run three installers to use GNUStep, and it is this type of disorganization that makes people shy away from things.  However, once you go through all those hoops, like an obedient show dog, you get the benefit of an Objective-C API (OpenStep/Cocoa) that you can program against.

Converting lilac to use GNUStep (<a href="http://github.com/mcormier/lilacStep">lilacStep</a>) was quick and easy.  The biggest stumbling block that I had was accidently typing "<strong>make</strong>" from a Cygwin window instead of the minGW.  Because I had access to a framework almost identical to Cocoa I could delete the files from src/CocoaLite and simplify the makefile.  I could also greatly simplify the implementation of <strong>getURLFromWeblocFilename</strong> since I had access to NSData and NSDictionary.

<h4>Lilac Version</h4><br>

<pre lang="objc" >
+ (NSString*)getURLFromWeblocFile:(NSString*)weblocFilename {

  CFDataRef data = NULL;
  NSString* urlString;

  FILE *file = fopen( [weblocFilename cString], "r" );

  if ( file != NULL ) {
       int result = fseek( file, 0, SEEK_END );
       result = ftell( file );
       rewind( file );

       char * buffer = ( char * )calloc( 1, result );

       if ( buffer != NULL ) {
           if ( fread( buffer, result, 1, file ) > 0 ) {
               data = CFDataCreate( NULL, buffer, result );
           }

           free( buffer );
       }

       fclose( file );
   }

   if ( data != NULL ) {
       CFPropertyListRef propertyList = CFPropertyListCreateFromXMLData( NULL, data,
           kCFPropertyListImmutable, NULL );


       CFTypeID typeID = CFGetTypeID(propertyList);
       if ( typeID == CFDictionaryGetTypeID() ) {
         CFDictionaryRef dict = (CFDictionaryRef)propertyList;
         CFStringRef value = CFDictionaryGetValue(dict, CFSTR( "URL" ) );
         if (value != NULL ) {
            char url[2048];
            Boolean success = CFStringGetCString(value, url, 2048, kCFStringEncodingWindowsLatin1);
            if (success) {
              urlString = [[NSString alloc] initWithCString:url encoding:NSISOLatin1StringEncoding];
            }
         }
       }
   }

   CFRelease( data );

  return urlString;
}
 </pre>

<h4>LilacStep Version</h4><br>

<pre lang="objc" >
+ (NSString*)getURLFromWeblocFile:(NSString*)weblocFilename {

  NSData *data  = [[NSData alloc] initWithContentsOfFile:weblocFilename];
  NSString* errorString;

  NSDictionary* propList = [NSPropertyListSerialization  propertyListFromData:data mutabilityOption:0
                                              format:NULL
                                    errorDescription:&errorString];

  NSString* urlString = [propList valueForKey:@"URL"];

  [data release];

  return urlString;
}
</pre>

<h4>Conclusion</h4><br>

Don't build you're own Cocoa framework, use one that is already working (GNUStep) and contribute to that one if it is missing something you need.

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>633</wp:post_id>
		<wp:post_date>2009-11-20 13:47:23</wp:post_date>
		<wp:post_date_gmt>2009-11-20 20:47:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>opening-a-webloc-file-in-windows</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<category domain="category" nicename="windows-cocoa"><![CDATA[Windows Cocoa]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Objective-C on Windows Tutorial</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=635</link>
		<pubDate>Thu, 05 Nov 2009 15:05:04 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=635</guid>
		<description></description>
		<content:encoded><![CDATA[This is a explanation of how to compile an Objective-C hello world program on the Windows platform.  To follow this tutorial you will need <a href="http://cygwin.com/">cygwin </a>installed with gcc.

Let's get started.

First create the header file <strong>Hello.h</strong>
<pre lang="objc" >
#import <objc/Object.h>

@interface Hello : Object {

}

-(void)world;

@end
</pre>

Because this is a pure Objective-C program and does not use Apple's cocoa framework the Hello object extends Object instead of NSObject.

Now create the implementation file <strong>Hello.m</strong>.
<pre lang="objc">
#import "Hello.h"

@implementation Hello

-(void)world {
  printf("Hello World!\n");
}
@end
</pre>
Nothing unusual in the <strong>Hello.m</strong> file. Let's do some compiling.

<strong>gcc -c -Wno-import Hello.m</strong>

GCC can compile and link programs so we pass the -c flag to tell it to compile, and it happily creates a sparkling <strong>Hello.o</strong> object file for us.

The second flag is much more interesting. It specifies not to display warnings if <strong>#import</strong> statements are used.  The free software movement fanatics don't like <strong>#import</strong> and it is listed as an obsolete feature[2].  Of course, it has probably been listed as obsolete for twenty years, and if it is ever removed Apple will just fork GCC.  Oh wait, Apple is now providing <a href="http://llvm.org/">llvm</a> as an option with Xcode so that problem has already been solved.

Now let's use our object in a program.  Create a <strong>main.m</strong> file.
<pre lang="objc">
#import <objc/Object.h>
#import "Hello.h"

main () {

  id hello;

  hello = [Hello new];
  [hello world];
  [hello free];
}
</pre>

New and free? Where's alloc, init, retain and release?  Those are all defined in NSObject of the Cocoa framework and are not part of the core Objective-C language.

Now compile this new implementation file to create a second object file <strong>main.o</strong>.

<strong>gcc -c -Wno-import main.m</strong>

Take the two object files and squish them together with the GCC linker to create a windows executable.

<strong>gcc -o helloWorld Hello.o main.o -lobjc</strong>

This is simple stuff. The -o parameter specifies the name of the executable.  Then we give a list of the object files we created and specify to link to the Objective-C library (-lobjc).  Now you should have <strong>helloWorld.exe</strong> on disk.

<h3>The -mno-cygwin Option</h3>

You're really proud of your helloWorld.exe and you think you might have something here.  You want to sell your program.  Who wouldn't pay for an application that displays "Hello World"?  It makes that computer seem so friendly.

Well you might have a problem. You see you built your program in cygwin and the EXE got linked to a DLL file called <strong>cygwin1.dll</strong>.  If you link and distribute this DLL file then your program falls under the GPL license agreement.

If the following command displays <strong>cygwin1.dll</strong> then you have a GPL problem.

<strong>objdump -p helloWorld.exe | grep "DLL Name"</strong>

If you prefer a GUI <a href="http://www.dependencywalker.com/">Dependency Walker</a> is a free tool that can also show you what DLL's an executable is linked to.

By adding the -mno-cygwin option to the link stage we can create a helloWorld.exe that we can sell without the constraints of the GPL.

<strong>gcc -o helloWorld -mno-cygwin Hello.o main.o -lobjc</strong>

<strong>objdump -p helloWorld.exe | grep "DLL Name"</strong>

Kode on.


<strong>References
</strong>
1. <em>Indiana University - CS304 - Compiling Objective-C </em><a href="http://www.cs.indiana.edu/classes/c304/ObjCompile.html">http://www.cs.indiana.edu/classes/c304/ObjCompile.html</a>

2. <em>The C Preprocessor for gcc version 3(Section 11.3.2)</em>
<a href="http://gcc.gnu.org/onlinedocs/gcc-3.4.6/cpp.pdf">http://gcc.gnu.org/onlinedocs/gcc-3.4.6/cpp.pdf</a>

3. <em>-mno-cygwin -- Building Mingw executables using Cygwin </em><a href="http://www.delorie.com/howto/cygwin/mno-cygwin-howto.html">http://www.delorie.com/howto/cygwin/mno-cygwin-howto.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>635</wp:post_id>
		<wp:post_date>2009-11-05 08:05:04</wp:post_date>
		<wp:post_date_gmt>2009-11-05 15:05:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>objective-c-on-windows-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is Windows Safari using Objective-C 2.0?</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=663</link>
		<pubDate>Thu, 12 Nov 2009 15:23:57 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=663</guid>
		<description></description>
		<content:encoded><![CDATA[If you look at the Safari installation directory on Windows you probably noticed the <strong>objc.dll</strong> file.  Are you curious if Windows Safari is using Objective-C version 1.0 or 2.0?  I was, and this is my little adventure on trying to find that out.  The short answer is<strong> NO</strong>.  Safari on Windows still uses Objective-C 1.0.  In this article I'm going to build the  Objective-C DLL and show you why I don't think Safari for Windows is using version 2.0.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/11/files.gif" alt="files" title="files" width="141" height="224" class="size-full wp-image-672" border=1/></center>

<h3>The Objective-C Runtime Environment</h3>

In my <a href="http://www.preenandprune.com/cocoamondo/?p=635">last article</a> I showed you how to build a bare bones Objective-C program in Windows with <a href="http://cygwin.com/">Cygwin</a>.  In that case, the Objective-C runtime used was installed with Cygwin.  You can execute the following command to take a peek at the Objective-C header and library files that Cygwin uses.

<strong>find /lib/gcc | grep objc</strong>

This is not the same Objective-C runtime that Apple uses when compiling Safari for Windows.  In fact there are three Objective-C runtime environments that I know of:

<ol>
	<li>Cygwin</li>
	<li>Apple</li>
	<li>GnuStep</li>
</ol>

We used Cygwin in the last article and now we're going to build Apple's implementation on Windows. I may discuss <a href="http://www.gnustep.org/">GnuStep</a> at a later date.

<h3>Let's Start Building Something</h3>

The first thing we need to do is get the latest source.
<a href="http://www.opensource.apple.com/tarballs/objc4/objc4-437.tar.gz">http://www.opensource.apple.com/tarballs/objc4/objc4-437.tar.gz</a>

Once you unpack the <a href="http://en.wiktionary.org/wiki/tarball">tarball</a> it's time to find out how to build this sucker.  You won't find a Makefile but you will find <strong>objc.vcproj</strong>.  This is a Microsoft Visual Studio project file.

If you don't have Visual Studio installed you can download the free version <a href="http://www.microsoft.com/exPress/">here</a>.  Why Microsoft insists on on continuing to charge for an IDE is beyond me.  Must be a cultural thing.  What you want is Visual C++ Expression Edition 2008.  It may or may not work with the new 2010 Beta; I have no idea.  I ran 2008 so I'm telling you to do the same.

Once you have Visual Studio installed, open up the project file and choose <strong> build --> build solution</strong>.  You're going to get some errors about <strong>AvailablityMacros.h</strong> and <strong>TargetConditionals.h</strong> not being found.

Did you really think it was going to be that easy?

<h3>Error #1 TargetConditionals.h</h3>

If you have XCode installed on a Mac you can easily find TargetConditionals.h.  However, that file doesn't support the Microsoft compiler. This is evident by the comment at the top of the file.  It's good to read the source no?

<pre lang="c" >
/*
     File:       TargetConditionals.h

     Contains:   Autoconfiguration of TARGET_ conditionals for Mac OS X and iPhone

                 Note:  TargetConditionals.h in 3.4 Universal Interfaces works
                        with all compilers.  This header only recognizes compilers
                        known to run on Mac OS X.

*/

#ifndef __TARGETCONDITIONALS__
#define __TARGETCONDITIONALS__
</pre>

So with a little Googly magic you'll find the TargetConditionals.h that you're looking for <a href="http://developer.apple.com/carbon/download/">here</a> under Universal Interfaces 3.4.2.  Of course, a *.img.bin file isn't much help on a Windows operating system so you're going to have to extract the files on a Mac and then copy them to the Windows Machine.

Oh, and the files are going to have those classic Mac line breaks instead of Unix line breaks so you're going to have to convert them.

<pre lang="bash">
for file in `ls *.h`
do
  tr '\r' '\n' < $file  > tempfile.txt
  mv tempfile.txt $file
done
</pre>

Put those UniversalHeaders files you worked so hard to get somewhere logical, and include the header files in your project search path.  What's that? You can't figure out where to do that?  Confusing Microsoft UI got you down?

<center><strong>Tools --> Options --> VC++ Directories</strong></center>

Then set the "Show directories for" combo box to "Include files".
<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/11/includeFiles.png" alt="includeFiles" title="includeFiles" border=2 width="409" height="155" class="aligncenter size-full wp-image-684" /></center>

If you do another build then you'll notice there are no complaints about TargetConditionals.h but Visual Studio still can't find AvailabilityMacros.h.

<h3>Error #2 AvailabilityMacros.h</h3>

To get rid of the AvailabilityMacros.h error grab all the header files in the latest SDK you installed on your Mac.  We are trying to compile the version of Objective-C that is compiled on Snow Leopard so you should probably get the 10.6 *.h files.

Create another directory for some extra includes.  I called mine
<strong>/cygdrive/c/Dev/usr/include/VisualStudio</strong>, but you can call it what you like.  Now copy these three files to that new directory, and add the directory to the list of include directories in Visual Studio.
<ul>
	<li>Availability.h</li>
	<li>AvailabilityInternal.h</li>
	<li>AvailabilityMacros.h</li>
</ul>

<h3>Error #3 stdint.h</h3>
<a href="http://en.wikipedia.org/wiki/Stdint.h">Stdint.h </a> is used for making C code more portable and you need a copy.

Download a copy and put it in that new include directory you created.
<a href="http://msinttypes.googlecode.com/svn/trunk/stdint.h">http://msinttypes.googlecode.com/svn/trunk/stdint.h</a>

<h3>Error #4 _unmap_image_nolock</h3>

Next you will see a link error about  some functions in the file objc-runtime-old.m.  There is some information about this issue here:
<a href=" http://lists.apple.com/archives/darwin-dev/2009/Sep/msg00075.html">http://lists.apple.com/.../msg00075.html</a>
<a href="http://lists.apple.com/archives/darwin-dev/2009/Sep/msg00076.html">http://lists.apple.com/.../msg00076.html</a>

Basically you need to comment out three functions so that it will compile.  The explanation on the mailing list is that the source is out of sync which means nobody at Apple has probably tried to build objc on Windows for a while.
<ul>
<li>unmap_image</li>
<li>map_images</li>
<li>load_images</li>
</ul>

Add <strong>#if !TARGET_OS_WIN32 ... #endif </strong> around those three functions.

<pre lang="c" >
#if !TARGET_OS_WIN32
/***********************************************************************
* unmap_image
* Process the given image which is about to be unmapped by dyld.
* mh is mach_header instead of headerType because that's what
*   dyld_priv.h says even for 64-bit.
**********************************************************************/
__private_extern__ void
unmap_image(const struct mach_header *mh, intptr_t vmaddr_slide)
{
    recursive_mutex_lock(&loadMethodLock);
    unmap_image_nolock(mh, vmaddr_slide);
    recursive_mutex_unlock(&loadMethodLock);
}


/***********************************************************************
* map_images
* Process the given images which are being mapped in by dyld.
* Calls ABI-agnostic code after taking ABI-specific locks.
**********************************************************************/
__private_extern__ const char *
map_images(enum dyld_image_states state, uint32_t infoCount,
           const struct dyld_image_info infoList[])
{
    const char *err;

    recursive_mutex_lock(&loadMethodLock);
    err = map_images_nolock(state, infoCount, infoList);
    recursive_mutex_unlock(&loadMethodLock);

    return err;
}


/***********************************************************************
* load_images
* Process +load in the given images which are being mapped in by dyld.
* Calls ABI-agnostic code after taking ABI-specific locks.
*
* Locking: acquires classLock and loadMethodLock
**********************************************************************/
__private_extern__ const char *
load_images(enum dyld_image_states state, uint32_t infoCount,
           const struct dyld_image_info infoList[])
{
    BOOL found;

    recursive_mutex_lock(&loadMethodLock);

    // Discover +load methods
    found = load_images_nolock(state, infoCount, infoList);

    // Call +load methods (without classLock - re-entrant)
    if (found) {
        call_load_methods();
    }

    recursive_mutex_unlock(&loadMethodLock);

    return NULL;
}
#endif
</pre>

<h3>Error #5 SRCROOT & DSTROOT</h3>

We've almost got this DLL built, we just need to do one last thing. Several places in the project properties the variables $(SRCROOT) and $(DSTROOT) are referenced.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/11/srcRoot.png" alt="srcRoot" title="srcRoot" width="413" height="157" class="aligncenter size-full wp-image-691" /></center>

Created a batch file to define those variables right before opening up the Visual Studio Project file.

<pre lang="dos">
set DSTROOT=c:\Dev\builds\ObjC\
set SRCROOT=c:\Dev\sourceRoot\ObjC\
C:\cygwin\bin\cygstart.exe objc.vcproj
</pre>

Now you should be able to successfully build the objc.dll library. It can be found under <strong>$DSTROOT\AppleInternal\bin\objc.dll</strong>.

<h3>Attempt to Build Objective-C 2.0</h3>

So far you've built Objective-C 1.0.  Now let's try to build version 2.0.  If you look at the source code you see <strong>__OBJC2__</strong> littered all over the kode.  To build version 2.0 you need to define it.

Add <strong>/D "__OBJC2__"</strong> to the C/C++ command line arguments in the project properties and do a build.  You will get lots of errors.

If you're building on 32-bit windows like myself you'll get an error about an unknown preprocessor command in <strong>objc-runtime-new.m</strong>.  Apparently the Microsoft C++ compiler does not recognize the <strong>#warning</strong> directive, must be a cultural thing.

<pre lang="c" line="430">
#if defined(__x86_64__)
    uint16_t *p = (uint16_t *)(dst + vtable_prototype_index_offset + 3);
    if (*p != 0x7fff) _objc_fatal("vtable_prototype busted");
    *p = index * 8;
#else
#   warning unknown architecture
#endif
</pre>

I didn't try too hard to build Objective-C 2.0 because I bumped into the following nugget when perusing <strong>objc-confg.h</strong>.

<pre lang="c" line="28">
#if TARGET_OS_EMBEDDED  ||  TARGET_OS_WIN32
#   define NO_GC 1
#endif
</pre>

<h3>Conclusion</h3>
     If Objective-C 2.0 can be built on 32-bit Windows I don't know how to do it.  Garbage collection is one of the staple features of Objective-C 2.0 (properties and fast enumeration are just syntactic sugar) and if it's not supported, is there really any point of building it?  Therefore we can firmly conclude that Safari for Windows is not using Objective-C 2.0, at least the 32-bit version anyway.

Keep on Koding on!

<strong>References</strong>
<a href="http://www.theocacao.com/document.page/510">A Quick Objective-C 2.0 Tutorial</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>663</wp:post_id>
		<wp:post_date>2009-11-12 08:23:57</wp:post_date>
		<wp:post_date_gmt>2009-11-12 15:23:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>is-windows-safari-using-objective-c-2-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to open a DMG file in Windows?</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=705</link>
		<pubDate>Tue, 17 Nov 2009 19:05:05 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=705</guid>
		<description></description>
		<content:encoded><![CDATA[So for some reason or another you need to get something from a DMG file and there isn't a Mac in the vicinity.  It is possible, and you don't need to pay $50 for something like <a href="http://www.mediafour.com/products/macdrive/">MacDrive</a>.

For the super lazy and non-koder types you can use <a href="http://vu1tur.eu.org/tools/" >dmg2iso</a> to create an ISO from the DMG file.  Then mount the ISO with some windows ISO mounting software.

I didn't do this.  I downloaded the source to <a href="http://vu1tur.eu.org/tools/" >dmg2img</a> and read the README.  Yes, I actually read README files, why do you think they're named so?  This pointed me in the direction of <a href="http://github.com/planetbeing/libdmg-hfsplus">libdmg-hfsplus</a>.

<blockquote>People looking for a more professional tool should take a look to the libdmg library and related utilities at
  http://github.com/planetbeing/libdmg-hfsplus/tree/master
  http://www.shanemcc.co.uk/libdmg/
(the libdmg code is still reported to be experimental, though, and it is also much bigger than dmg2img.)</blockquote>

<h3>Build the Tools</h3>
Download the latest version of <a href="http://github.com/planetbeing/libdmg-hfsplus">libdmg-hfsplus</a> , the git enlightened can execute:

<pre lang="objc">
git clone git://github.com/planetbeing/libdmg-hfsplus.git
</pre>

libdmg-hfsplus uses <a href="http://www.cmake.org/">CMake</a> so make sure you have cmake installed.  You can either install the cygwin package or get the latest <a href="http://www.cmake.org/cmake/resources/software.html">Windows version</a>.  I recommend the cygwin version since that's what I used.

Execute these commands in the root libdmg-hfsplus directory:
<pre lang="objc">
cmake ./
make
</pre>

Now you've built the tools you need to cut through DMG files like butter.
<ul><li>dmg.exe</li><li>hdutil.exe</li><li>hfsplus.exe</li>
</ul>

Copy the exe files somewhere that is in your path (~/bin for example).

<h3>Use the Tools</h3>

To test this out you're gonna need a DMG file. You can download the DMG file I used <a href="http://sunflower.preenandprune.com/download.php">here</a>.  It's zipped up so you should probably unzip it.

Of the three executable files you built the only one you really need to use is <strong>hdutil</strong>.  Here is the command to list the contents of a DMG file.

<pre lang="objc">
hdutil SunFlowerPublic-0.7.dmg ls
</pre>

The ls command will also take a parameter which will let you explore the contents of the DMG file system.

<pre lang="objc">
hdutil SunFlowerPublic-0.7.dmg ls /SunFlower.app/Contents
</pre>

The extract command wants two arguments.  The first is the location of the file in the DMG file.  The second is where to put the file on your machine.

<pre lang="objc">
hdutil SunFlowerPublic-0.7.dmg extract /DMG_backgroundPro.png local.png
</pre>

Use the extractall command to pull out everything in one fell swoop.

<pre lang="objc">
hdutil SunFlowerPublic-0.7.dmg extractall
</pre>

Finally the easiest way to extract the DMG to a clean directory is to create a new directory and call the extractall command from that location.

<pre lang="objc">
mkdir explodedDMG
cd explodedDMG
hdutil ../SunFlowerPublic-0.7.dmg extractall
</pre>

The core code of libdmg-hfsplus appears to be system independent so this should work with Linux also.

Kode on!

<strong>References:</strong>
<ul><li><a href="http://github.com/planetbeing/libdmg-hfsplus">libdmg-hfsplus</a></li><li><a href="http://vu1tur.eu.org/tools/" > dmg2img + dmg2iso</a> </li><li><a href="http://www.linuxjournal.com/node/6700/print">Cross-Platform Software Development Using CMake</a></li>
<li><a href="http://www.computing.net/answers/mac/dmg-without-os-x-using-a-pc/10311.html">.DMG without OS X using a PC</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>705</wp:post_id>
		<wp:post_date>2009-11-17 12:05:05</wp:post_date>
		<wp:post_date_gmt>2009-11-17 19:05:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-to-open-a-dmg-file-in-windows</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows-cocoa"><![CDATA[Windows Cocoa]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e7b8f826c07aaad1b305ef028d74d580</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_286065d1bb5c9f44731d12bb22d15bef</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Switch between .m and .h file in VI</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=755</link>
		<pubDate>Tue, 24 Nov 2009 20:40:49 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=755</guid>
		<description></description>
		<content:encoded><![CDATA[If you are working on Objective-C kode in VI the following functions and key mapping will allow you to quickly switch between the header and implementation file.

<pre lang="vim" >
" Switch editing between
" *.c and *.h files  (C)
" or
" *.m and *.h files  (ObjC)
function! Flip_Extension()

  if match(expand("%"),'\.m') > 0
    let s:flipname = substitute(expand("%"),'\.m\(.*\)','.h\1',"")
    call LoadFile(s:flipname)
  elseif match(expand("%"),"\\.h") > 0
    let s:flipname = substitute(expand("%"),'\.h\(.*\)','.m\1',"")
    if (filereadable(s:flipname)) > 0
      call LoadFile(s:flipname)
    else
      let s:flipname = substitute(expand("%"),'\.h\(.*\)','.c\1',"")
      call LoadFile(s:flipname)
    endif
  elseif match(expand("%"),"\\.c") > 0
    let s:flipname = substitute(expand("%"),'\.c\(.*\)','.h\1',"")
    call LoadFile(s:flipname)
  endif

endfun

" Find the filename in an existing buffer
" if it exists open that buffer so you don't
" lose your file position.
function! LoadFile(filename)
  let s:bufname = bufname(a:filename)
  if (strlen(s:bufname)) > 0
    exe ":buffer" s:bufname
  else
    exe ":find " a:filename
  endif
endfun

map <f4> :call Flip_Extension()<cr>
</pre>

Kode on!

Reference:
<a href="http://vim.wikia.com/wiki/Easily_switch_between_source_and_header_file">Easily switch between source and header file</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>755</wp:post_id>
		<wp:post_date>2009-11-24 13:40:49</wp:post_date>
		<wp:post_date_gmt>2009-11-24 20:40:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>switch-between-m-and-h-file-in-vi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>UI Blunder</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=761</link>
		<pubDate>Mon, 30 Nov 2009 14:34:16 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=761</guid>
		<description></description>
		<content:encoded><![CDATA[What's wrong with this picture?

<center><img class="aligncenter  wp-image-762" title="UIBlunder" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/11/UIBlunder.png" alt="UIBlunder" /></center>
<ol>
	<li>Files Ready to be Written to the Disc</li>
	<li>The headers "Name", "Size",...,"Location"</li>
</ol>
On the first point, I've inserted a read only DVD into my machine and am shown a "Files Ready to be Written to Disc" section. How is this helpful and not confusing to regular users? Why do I care that Windows really wanted to write a file to the DVD but can't because it's read only?

The second point is more subtle. The column headers don't even apply to this icon mode. You can't resize them in this view. They are there in case you decide to switch to a view mode that might need them. Again, how is this helpful and not confusing to regular users?

The screenshot is from Vista.

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>761</wp:post_id>
		<wp:post_date>2009-11-30 07:34:16</wp:post_date>
		<wp:post_date_gmt>2009-11-30 14:34:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ui-blunder</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Core Animation: Using Layer Masks</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=7</link>
		<pubDate>Mon, 17 Mar 2008 17:05:04 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[Using a mask on a core animation layer is quite easy.  This example does the following:

<ul>
  <li>Creates an NSImage by filling an NSBezierPath.</li>
  <li>Converts the NSImage into a CGImageRef </li>
  <li>Creates three CALayers
 <ul>
     	<li>one to show what the mask looks like</li>
        <li>one for the layer that will have</li>
	<li>one for our our mask</li>
 </ul>
 </li>

</ul>


Voila!

<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/calayermask.png" alt="A Core Animation Mask" title="calayermask" width="406" height="319" class="aligncenter size-full wp-image-5" border="2" />

You can <a href='http://173.203.83.44/cocoamondo/wp-content/uploads/2008/04/calayermask.zip'>grab the kode here.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2008-03-17 10:05:04</wp:post_date>
		<wp:post_date_gmt>2008-03-17 17:05:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>core-animation-tutorial-using-layer-masks</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="core-animation"><![CDATA[Core Animation]]></category>
		<category domain="post_tag" nicename="core-animation"><![CDATA[Core Animation]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771023]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_comments_status</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{i:2;s:1:"1";i:3;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[perlmunger]]></wp:comment_author>
			<wp:comment_author_email>matt.long@matthew-long.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>166.58.0.128</wp:comment_author_IP>
			<wp:comment_date>2009-01-19 15:24:49</wp:comment_date>
			<wp:comment_date_gmt>2009-01-19 22:24:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you ever figure out if there was a simple way to invert the mask?

Thanks.

-Matt]]></wp:comment_content>
			<wp:comment_approved>post-trashed</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Matthieu Cormier]]></wp:comment_author>
			<wp:comment_author_email>mcormier@cs.dal.ca</wp:comment_author_email>
			<wp:comment_author_url>http://allusions.sourceforge.net</wp:comment_author_url>
			<wp:comment_author_IP>24.222.241.9</wp:comment_author_IP>
			<wp:comment_date>2009-01-19 15:29:34</wp:comment_date>
			<wp:comment_date_gmt>2009-01-19 22:29:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I never even considered that question.  It should be easy enough to do though.  Write a function that takes an Image as input.  If the pixel is transparent make it solid, and vice versa.  Return the resultant image.]]></wp:comment_content>
			<wp:comment_approved>post-trashed</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Golden % Braeburn</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=25</link>
		<pubDate>Sat, 07 Jun 2008 22:55:29 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[ 
The <a href="http://golden-braeburn.com/">Golden % Braeburn</a> website now has some information on it.  Golden % Braeburn is a payment processing solution that <a href="http://www.wilshipley.com/blog/">Wil Shipley</a> of <a href="http://www.delicious-monster.com/">Delicious Monster</a> has built.

<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/07/golden.jpg" alt="Golden Braeburn page" title="golden" width="470" height="197" class="aligncenter size-full wp-image-28" />

Site change discovered with <a href="http://sunflower.preenandprune.com">SunFlower</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2008-06-07 15:55:29</wp:post_date>
		<wp:post_date_gmt>2008-06-07 22:55:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>goldenbraeburn</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="website-update"><![CDATA[Website Update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771339]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tapulous</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=28</link>
		<pubDate>Sat, 05 Jul 2008 21:18:41 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://www.tapulous.com/">Tapulous</a> web page has changed from a teaser page, to a teaser page that names the iPhone applications that will be available.  A link to a <a href="http://tapulous.com/blog/">blog</a> has been added.  The blog has a youtube video of the tap tap game.

<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/07/tapper.jpg" alt="Tapulous web page" title="tapper" width="465" height="197" class="aligncenter size-full wp-image-27" />

Site change discovered with <a href="http://sunflower.preenandprune.com">SunFlower</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2008-07-05 14:18:41</wp:post_date>
		<wp:post_date_gmt>2008-07-05 21:18:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>tapulous</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="category" nicename="website-update"><![CDATA[Website Update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381772693]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lee Updates Lemur Teaser</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=56</link>
		<pubDate>Thu, 25 Sep 2008 00:29:41 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[Mike Lee, formerly of <a href="http://www.delicious-monster.com/">Delicious Monster</a>, and <a href="http://tapulous.com/">Tapulous</a>, has updated the <a href="http://unitedlemur.org/">United Lemur</a> teaser page to...  yes, you guessed it, another teaser page.

<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/09/lemur.png" alt="" title="United Lemur change" width="485" height="240" class="aligncenter size-full wp-image-57" />

It looks likes October 9th is unofficially iPhone liberation day.  If your curiosity is still not quenched, then check out Mike's <a href="http://www.atomicwang.org/motherfucker/Index/Index.html">blog</a> where he brazenly spews forth whatever is in his brain about life, technology and how much hotter his wife is than yours.


Site change discovered with <a href="http://sunflower.preenandprune.com/">SunFlower</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2008-09-24 17:29:41</wp:post_date>
		<wp:post_date_gmt>2008-09-25 00:29:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lee-updates-lemur-teaser</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="website-update"><![CDATA[Website Update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381772695]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What&#039;s a puzzllotto?</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=60</link>
		<pubDate>Thu, 09 Oct 2008 00:51:41 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://unitedlemur.org/">United Lemur</a> will be having a media event tomorrow at 1 PM at 4261 El Camino Real, Pal Alto, CA 94306 in the trader Vic's ballroom.

<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/10/lemurdetails.png" alt="" title="lemur details" width="470" height="203" class="aligncenter size-full wp-image-61" />


Check the site again tomorrow, I'm sure more details will be posted.

Site change discovered with <a href="http://sunflower.preenandprune.com">SunFlower</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2008-10-08 17:51:41</wp:post_date>
		<wp:post_date_gmt>2008-10-09 00:51:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>puzzllott</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="category" nicename="website-update"><![CDATA[Website Update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381772663]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Web Designers These Days...</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=70</link>
		<pubDate>Mon, 13 Oct 2008 14:49:09 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[Repeat after me.  Keep things simple. Don't over complicate things.  This post is about quirky web design, it is not Mac specific (except for the fact that I am using Mac Safari to do all the testing); you can safely skip this post if you're only interested in pure Mac content.

One of the sites I monitor with <a href="http://sunflower.preenandprune.com/">SunFlower</a> is an IT company called <a href="http://www.coemergence.com/index.php">coemergence</a>.  They updated their site recently, and ever since then the rendering of the image below started causing false positives.

<img class="aligncenter size-medium wp-image-71" title="cobanner_665x218" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/10/cobanner_665x218-300x98.jpg" alt="" width="300" height="98" />

The false positives occurred because the image would be rendered at slightly different sizes.  The reason for this stems from the javascript code below; in particular the use of <strong>document.body.clientWidth</strong>.

<pre lang="html4strict" >
var coe_image_width = 665;
var coe_image_height = 218;
var coe_width = document.body.clientWidth;
var coe_left = coe_width - (coe_width * 0.8);
var coe_center = (coe_width - coe_left) * 0.8;
var coe_multiplier = coe_center / coe_image_width;
document.write("<img src='/images/stories/coemergence/cobanner_665x218.jpg' " +
"width='" + ((coe_image_width * coe_multiplier) * 0.82) + "' " +
"height='" + ((coe_image_height * coe_multiplier) * 0.82)  + "' " +
"align='center'/>");
</pre>

<h3>What mistakes did the author make? </h3>

For one, <strong>document.body.client</strong> has no relation to the actual width of the webview, it is the size of the view port.  If you squeeze this page to about 300px wide and do a refresh you will get a small image. If you then resize the window the image stays small, which is probably not the effect the author is looking for. We'll look the other way and pretend the page doesn't look icky when you resize it.

The designer also made the assumption that the page is fully rendered and that the last thing that will be rendered will always be this image where the height and width are being calculated dynamically.

<h3>Want to see that the result is inconsistent?</h3>
<ol>
	<li>Load <a href="http://www.coemergence.com/index.php">http://www.coemergence.com/index.php</a> in a new Safari  window</li>
	<li>Choose Develop -&gt; Show Web Inspector</li>
	<li>Switch to the DOM tree view</li>
	<li>Find the calculated height and width of the image</li>
	<li>Close the window</li>
	<li>Open a new Safari window (which will be the same size as the previous)</li>
	<li>Repeat steps 1 to 6 and compare the results</li>
</ol>
I did the steps above and I got the following different results.

<h3>Result 1</h3>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/10/test1.png" alt="" title="test1" width="484" height="126" class="aligncenter size-full wp-image-80" />
<h3>Result 2</h3>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/10/test2.png" alt="" title="test2" width="422" height="111" class="aligncenter size-full wp-image-81" />

I'm not sure the exact reason that the sizes are different, and I don't plan on spending any time checking, however I have two hypotheses.
<ol>
	<li>When windows/views are created in Mac OS X the size is not exact.  You could get a width of 799.99999 when you requested 800 (very doubtful) </li>
	<li>The size of the variable depends on the order that elements are rendered on the page, and stylesheet elements are applied, and that order is not guaranteed.</li>
</ol>

There are many other design quirks with the page, like the fact that there is no minimum width and if you make the page narrow the search field and text resize buttons hide behind a current.

<h3>Conclusion</h3>

The calculated width and height are only slightly different and I only noticed it because I am using <a href="http://sunflower.preenandprune.com/">SunFlower</a> to monitor the page.  But that doesn't excuse the author for making things over-complicated.

Choose a layout and stick to it.  Making the width of your page a certain size and using white space is a tried and true method of web design. Don't get all fancy pants when you could just do something simple.

Unfortunately, for this page, using an exclusion filter in <a href="http://sunflower.preenandprune.com/">SunFlower</a> does not eliminate false positives because even though we can ignore the image, when the height of the image is different, it pushes the content text up or down.

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date>2008-10-13 07:49:09</wp:post_date>
		<wp:post_date_gmt>2008-10-13 14:49:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>web-designers-these-days</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771085]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft Educational FAIL</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=226</link>
		<pubDate>Fri, 02 Jan 2009 19:18:11 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[Although the primary topic for this blog is Macintosh development, user interface and experience are also becoming a main theme.  Therefore I thought it would be valuable to outline the technical issues I had viewing the Microsoft 2008 <a href="http://www.msteched.com">tech-ed</a> conference presentations.

Even if your focus is primarily as a Cocoa (insert other programming language here) developer, it's a good professional development strategy to get an overview of the technological offerings in other ponds.  You might take an idea or concept and apply it to what you're working on, or you might see what doesn't work well and avoid the same mistake.

I heard about a conference called Microsoft tech-days and planned on watching presentations on the Windows mobile technology for a day.  We all know the iPhone is the hot ticket item to kode for these days, but to get a sense of perspective, I thought it would be interesting to get an overview of Windows mobile.

Due to poor registration the live talk was canceled.  However, I did receive the conference swag bag in the mail.  It contained some obligatory evaluation software and a set of DVD's for the 2008 Microsoft tech-ed conference (Cocoa translation:tech-ed is roughly equivalent to the WWDC).

These discs sat around the house for a while and over the holidays I decided to start looking at them.  I yanked out my work laptop (not a Mac) running Vista with all the latest updates, and put the first disc in.  An HTML page (Default.htm) on the DVD automatically loaded up in my default browser, Chrome, so I opened the URL in Internet Explorer.  Viewing Microsoft web pages in a Microsoft web browser is generally advisable. ;)

<center>
<a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/12/default.jpg"><img class="aligncenter size-medium wp-image-234" title="Tech-ed cover page" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/default-300x225.jpg" alt="" width="300" height="225" /></a>
 </center>

This is where things got interesting.  I clicked on the "view sessions" button and I was prompted to install Silverlight.  I was pretty sure I had the latest version installed because I always install the latest updates on this machine, but I clicked on the install Silverlight button anyway and got the following page.

<center>
<a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2008/12/silverlight.jpg"><img class="aligncenter size-medium wp-image-239" title="silverlight" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2008/12/silverlight-300x225.jpg" alt="" width="300" height="225" /></a>
</center> 

The page states, <em>"The site that you visited was built for an earlier, beta version of Silverlight - not the current one"</em>.  So I have the latest Silverlight (version 2) but I can't view the page because the page burnt onto the DVD specifies version 2 beta 2.
<div class="note"><a href="http://en.wikipedia.org/wiki/Microsoft_Silverlight#Silverlight_2"><strong>Silverlight</strong></a> is basically Microsoft's competitive offering to Adobe flash and dynamic AJAXy web pages.</div>

No problem, I'll manually browse the disk; the Silverlight page is just an index of all the sessions.

<center><img class="size-full wp-image-254" title="directories" src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/01/directories.jpg" border="2" alt="" width="228" height="190" />
 </center>

Of course every directory is three characters long, except PPTX, it gets an extra character, so more digging is required.   Looking in the ARC folder there are a bunch of other ARC folders with number codes appended to the name (ARC201, ARC202,...).  Inside each of these directories is a slides directory with a bunch of jpeg files (Slide1.jpg, Slide2.jpg,...).  The second slide contains the title of the talk.  Finally, I know the title of a talk, and I know that ARC probably stands for Architecture.  This is a little thing, but big things can be the summation of the little things like this.

I looked at the HTML code and ancillary files until my curiosity was satisfied,(eventually I determined that WIT=Women in Technology, KEY=Keynote, MBL=Mobile.) then I started doing web searches about the issue I was having with Silverlight not displaying the page.

A blog posting by Tim Heuer entitled <a href="http://timheuer.com/blog/archive/2008/10/31/teched-north-america-dvd-silverlight-update.aspx">TechEd 2008 North America DVD Update</a> explains that yes, it was a big goof.

<em>"In hindsight, choosing to burn a copy of a Beta 2 application to a distributable disc was not a good idea.  We admit that and apologize.  Hopefully you can see that the content is the king here and that is not lost or unusable.  Thanks for your patience while we created the content map based on your feedback!"</em> -- Tim Heuer

The blog posting also provides a <a href="http://s3.amazonaws.com/timheuer-img/techeddvdmap.pdf">downloadable PDF</a> with an index for all the sessions. This document also explains that you need to click on the WMS (Windows Media Skin) file to watch the talk.  The WMS file uses javascript with begin and end times for each slide and plays a WMV audio file synchronously.
<h2>Conclusion</h2>
Let's take a look at my entire educational experience:
<ul>
	<li>The live talk was canceled.</li>
	<li>The DVD didn't work properly because it was hard coded for Silverlight beta 2.</li>
	<li>Unreadable three character directory names.</li>
	<li>I had to do research to figure out the best way to view the sessions and get an index of the sessions.</li>
</ul>
So far I've spent more time tinkering with files and web pages in order to view the tech-ed conference than viewing the DVD material.  Something that should be drop dead simple, putting a bunch of video files on a DVD for developers to view, became an ordeal.  Creating WMV files with the jpeg slides as the video track would have been much simpler. One file with a video and audio track for each talk.

<center>
<a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/01/player.jpg"><img class="alignnone size-medium wp-image-265" title="player" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/01/player-300x225.jpg" alt="" width="300" height="225" /></a></center>

Instead Microsoft decided to use a WMS file to create a custom video player; with chapters created by using a javascript file and a bunch of jpeg files.  Having chapters is a good idea, unfortunately the ability to watch the talk in full screen mode was sacrificed (another one of those little things).

I can confidently say that Microsoft does not have their act together, and will not anytime soon.  But some of these talks do look interesting.  So thanks for the <a href="http://en.wikipedia.org/wiki/So_Long,_and_Thanks_for_All_the_Fish"><del>fish</del></a> free DVD's.

So far I've enjoyed <a href="http://www.linkedin.com/in/mihak">Miha Kralj</a>'s talk on architecture entitled <a href="http://msevents.microsoft.com/CUI/WebCastEventDetails.aspx?EventID=1032382336&amp;EventCategory=3&amp;culture=en-US&amp;CountryCode=US">"Architectures: The Good, the Bad and the Ugly"</a>. In it he discusses many anti-patterns and lets the ugly out of the bag on Sharepoint; apparently it uses stored procedures instead of foreign key constraints for referential integrity.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2009-01-02 12:18:11</wp:post_date>
		<wp:post_date_gmt>2009-01-02 19:18:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-educational-fail</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
		<category domain="category" nicename="user-interface"><![CDATA[User Interface]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771168]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SunFlower tells me the housing market is dropping...</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=329</link>
		<pubDate>Tue, 10 Mar 2009 01:06:44 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[One of the things I keep tabs on with <a href="http://sunflower.preenandprune.com">SunFlower</a> is apartment and housing prices.  Recently I noticed a significant drop in the price of some of the units in a yet to be built condominium called the <a href="http://www.theatrelofts.ca"> theatre lofts</a> .

<strong>December 16th 2008</strong>
<ul>
	<li>The Premiere, $194,900</li>
	<li>The Opera, $204,900</li>
</ul>


<a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/03/pricing_dec16.gif"><img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/03/pricing_dec16clip.gif"  /></a>


<strong>March 9th 2009</strong>
<ul>
	<li>The Premiere, $175,000 ($19,900 drop)</li>
	<li>The Opera, $179,000 ($25,900 drop)</li>
</ul>

<a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/03/pricing_mar09.gif"><img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/03/pricing_mar09_clip.gif" /></a>


Possibly a sign of things to come.

<strong>Update (March 10th):  </strong>The prices for the premiere and opera have changed again.  They have been bumped to $279,900 and $274,900 respectively and the square footage has been increased by about 300-400 square feet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date>2009-03-09 18:06:44</wp:post_date>
		<wp:post_date_gmt>2009-03-10 01:06:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sunflower-tells-me-the-housing-market-is-dropping</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="website-update"><![CDATA[Website Update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381772648]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating an Interface Builder Style Autosizing Animation</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=361</link>
		<pubDate>Sun, 29 Mar 2009 12:15:54 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=361</guid>
		<description></description>
		<content:encoded><![CDATA[Configuring view autosizing in Apple's Interface Builder is greatly aided by an animated view that shows how the currently selected element will resize with respect to it's parent. In the yet to be released version of <a href="http://sunflower.preenandprune.com">SunFlower</a> I am planning on using a similar animation to make the anchor corner property of exclusion filters more intuitive. This article is about copying that Interface Builder UI element.

<center>
<img class="alignnone  wp-image-365" style="border: 2px solid black;" title="ibinterface" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/03/ibinterface.png" alt="" border="2" /></center>
<h2>Attempt 1</h2>
My first attempt was unsuccessful. I attempted to use two layers and constraints. When I automated the bounds of the parent layer the sublayer only moved on the Y axis and did not move on the X axis.

<center>
<object width="352" height="308" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/03/attempt1.mp4" /><param name="autoplay" value="false" /><embed width="352" height="308" type="application/x-shockwave-flash" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/03/attempt1.mp4" autoplay="false" /></object></center>Download the <a href="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/06/IB_AnimationEmulateFAIL.zip">kode</a>.
<h2>Attempt 2</h2>
After must chagrin I solved the problem. Instead of using two layers and constraints the kode was changed to use one layer. The resizing white rectangle is still a core animation layer but the red square was is now image content. The red square is anchored to the corner using the contentsgravity property.

<center>
<object width="352" height="308" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/03/attempt2.mp4" /><param name="autoplay" value="false" /><embed width="352" height="308" type="application/x-shockwave-flash" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/03/attempt2.mp4" autoplay="false" /></object></center>Download the <a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/06/IB_AnimationEmulate.zip">kode</a>. <em>(If you click on the view the red square will cycle the corner it is anchored to.)</em>

I am still curious to know if it is possible to solve this problem with the two layer constraint method; if you know how, then please drop me a line.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date>2009-03-29 05:15:54</wp:post_date>
		<wp:post_date_gmt>2009-03-29 12:15:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>creating-an-interface-builder-style-autosizing-animation</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="core-animation"><![CDATA[Core Animation]]></category>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/03/attempt2.mp4
82617
video/mp4
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.preenandprune.com/cocoamondo/wp-content/uploads/2009/03/attempt1.mp4
81762
video/mp4
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381772043]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SunFlower 0.11 Released</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=397</link>
		<pubDate>Sat, 18 Apr 2009 12:23:42 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=397</guid>
		<description></description>
		<content:encoded><![CDATA[I am happy to announce the release of <a href="http://sunflower.preenandprune.com/"> SunFlower</a> 0.11.  As there are some user interface changes I have decided to post a brief walkthrough of the changes.

<h3>The Inspector</h3>

The most dramatic change is to the info window, which is now a Apple iLife/iWork style inspector.

<center>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/04/infowindow.jpg" alt="" border=2 title="infowindow" width="274" height="219" class="alignnone size-full wp-image-404" />
The info window, pre 0.11
</center>

<center>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/04/inspectorwindow.jpg" alt="" title="inspectorwindow" width="248" height="202" border=2 class="alignnone size-full wp-image-401" />
The new inspector panel
</center>

Like the iWork and iLife applications there is a set of icon based tabs at the top of the panel, and it has animated transitions between the tabs.  You might be thinking, "Hey, but now I can't see the whole website URL?".  I'd like to draw your attention to the blue button with arrows.

<center>
 <img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/04/mondotextfield.jpg" alt="" border=2 title="mondotextfield" width="401" height="299" class="alignnone size-full wp-image-409" />
After clicking the blue button
</center>

Clicking the blue button summons a window where you can see the full text.  You can edit the text in this other window.  If you are interested in the design process for this interface you can read more about it <a href="http://www.preenandprune.com/cocoamondo/?p=141">here</a>.

<h3>Anchor Selection</h3>

The interface for setting the anchor corner of an exclusion filter has also changed significantly.  In the old interface you needed to <strong>control-click</strong> on the selected exclusion filter to change the anchor.  This hid the option.  Filter anchors are also one of the more complicated features in SunFlower and the interface did not make it apparent as to what happened when you changed the anchor corner.  You needed to read the documentation to understand how everything worked.

<center>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/04/oldanchor.jpg" alt="" title="oldanchor" width="297" height="277" class="alignnone size-full wp-image-413" />
Changing the anchor, pre 0.11
</center>

In the new interface it's easier to find the option because it's in the inspector.  You also get instantaneous feedback from the animated view beside the anchor selector.

<center>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/04/newanchor.jpg" alt="" title="newanchor" width="236" height="385" class="alignnone size-full wp-image-414" />
The new anchor interface
</center>

<h3>New Preferences</h3>

Another change in the latest version of SunFlower is the ability to enable or disable plug-ins and JavaScript.  This can be done on a global or per subscription basis.

<center>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/04/preferences.jpg" alt="" title="preferences" width="404" height="209" class="alignnone size-full wp-image-417" />
Global settings for plug-ins and JavaScript
</center>

<center>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/04/customprefs.jpg" alt="" title="customprefs" width="240" height="341" class="alignnone size-full wp-image-419" />
Custom Settings in the inspector
</center>


<h3>Filters Icon</h3>

Finally the filters icon has been changed.  The original icon was borrowed from Adobe Photoshop, and is used for layer masks in Photoshop.  It was a good place holder, but exclusion filters cannot be circular so the icon has been changed to something more appropriate.

<center>
<img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/04/filters.png" alt="" title="filters" width="190" height="60" class="alignnone size-full wp-image-422" />
</center>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date>2009-04-18 05:23:42</wp:post_date>
		<wp:post_date_gmt>2009-04-18 12:23:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sunflower-011-released</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771357]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zoom Zoom</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=564</link>
		<pubDate>Sun, 28 Jun 2009 23:46:42 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=564</guid>
		<description></description>
		<content:encoded><![CDATA[In my last post I presented some kode for creating a <a href="http://www.preenandprune.com/cocoamondo/?p=468">custom migration manager</a>.  The kode has some sweet syntax colour highlighting courtesy of a WordPress plugin called <a href="http://wordpress.org/extend/plugins/wp-syntax/">wp-syntax</a>.

To keep the original format of the kode, wp_syntax uses a scrollable div.  This works, but isn't ideal, especially when the content column is narrow, like the current layout of this blog.  So on several occasions, I've caught myself editing kode so that it would fit more cleanly in a narrow column, for the benefit of the reader.

I don't like boring and tedious tasks so I contemplated restructuring this blog so that the content column would be wider to help eliminate this problem.  But there is a reason why I like a narrow column.   A narrow column of text is easier to read because your mind doesn't have to work as hard when moving to the next line.  When the line length is too long, reading is more difficult.  This concept applies to kode, but I feel the comfortable line length is much longer for various reasons.  For example, in Objective-C you are probably chunking alloc/init calls that occur on one line.

Essentially when I embed kode into this blog there are two ideal content block sizes that I want.  So I wrote a WordPress plugin to solve the problem.

The kode below uses the MondoKode-Zoomer plugin.

<pre lang="objC" zoom="yes">
- (BOOL)migrationNeeded {
  return ! ( currentStoreModel == [objectModels count] );
}

- (BOOL)migrateIfNeeded:(NSError**)error {

  if ( ! [self migrationNeeded] ) {
    return YES; }

  // Backup the store before we do anything
  NSString* backupFilePath = [[storeURL path] stringByAppendingString:@".backup"];
  if( ![self overWriteCopy:[storeURL path] to:backupFilePath error:error] ) {
    return NO;
  }

  NSDictionary *opts =
  [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:YES]
                              forKey:NSMigratePersistentStoresAutomaticallyOption];
  NSInteger i;
  NSURL* tempURL = [NSURL fileURLWithPath:[[storeURL path] stringByAppendingString:@".temp"]];

  for( i = currentStoreModel; i < [objectModels count] - 1; i++ ) {
    // Migrate the store to a temp file.
    // SunFlower.xml --> SunFlower.xml.temp
    BOOL migrationSuccess = [[self migrationManagerForIndex:i]
                               migrateStoreFromURL:storeURL type:NSXMLStoreType options:opts
                               withMappingModel:[self mappingModelForIndex:i]
                               toDestinationURL:tempURL
                              destinationType:NSXMLStoreType destinationOptions:opts
                               error:error];

    // Revert and return if:
    // 1.) The migration failed.
    // 2.) The temp file could not be copied over the original.
    // 3.) The temp file could not be deleted.
    if (! migrationSuccess ||
        ! [self overWriteCopy:[tempURL path] to:[storeURL path] error:error] ||
        ! [[NSFileManager defaultManager]  removeItemAtPath:[tempURL path] error:error]) {
      // Revert to backup file and exit
      // Not passing an error because we want to propogate the previous error.
      [self overWriteCopy:backupFilePath to:[storeURL path]  error:NULL];
      return NO;
    }
  }

  return YES;
}
</pre>

I've posted the source on <a href="http://github.com/mcormier/MondoKode-zoomer/tree/master">GitHub</a>.  Currently it's not a drop and run install.  You need to overwrite the wp-syntax.php file in the wp-syntax plugin.  I plan on contacting the author of wp-syntax to see if he can help make this addition officially supported.

Happy Koding]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date>2009-06-28 16:46:42</wp:post_date>
		<wp:post_date_gmt>2009-06-28 23:46:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zoom-zoom</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381772835]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cocoa Mondo Kit 1.0</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=767</link>
		<pubDate>Sun, 06 Dec 2009 16:45:50 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=767</guid>
		<description></description>
		<content:encoded><![CDATA[A year ago I released the <a href="http://www.preenandprune.com/cocoamondo/?p=141">MondoTextField</a>. Well I've modified the component, made some bug fixes, and wrapped it in an Interface Builder plugin called <a href="http://mcormier.github.com/CocoaMondoKit/">Cocoa Mondo Kit</a>.

<center>
<a href="http://mcormier.github.com/CocoaMondoKit/"  ><img src="http://mcormier.github.com/CocoaMondoKit/images/zip.png" border=0></a>
Cocoa Mondo Kit 1.0</center>


It's seems slightly silly to release an Interface Builder plugin with only one component, but including the component as a framework is much cleaner than importing a bunch of source files.

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>767</wp:post_id>
		<wp:post_date>2009-12-06 09:45:50</wp:post_date>
		<wp:post_date_gmt>2009-12-06 16:45:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cocoa-mondo-kit-1-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CocoaMondo Kit 1.1</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=779</link>
		<pubDate>Mon, 28 Dec 2009 15:36:23 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=779</guid>
		<description></description>
		<content:encoded><![CDATA[I looked high and low for a switch interface similar to the Time Machine switch.  The iPhone uses this style of interface all the time with the <a href="http://developer.apple.com/iphone/library/documentation/UIKit/Reference/UISwitch_Class/Reference/Reference.html">UISwitch</a>.  Since I couldn't find an implementation, I bit the bullet, created one and added it to <a href="http://mcormier.github.com/CocoaMondoKit/">CocoaMondo Kit 1.1</a>.

<center><img src="http://mcormier.github.com/CocoaMondoKit/images/switch.jpg"></center>

Please don't abuse this control and replace all your checkboxes with switches.  Use common sense.  A good guildine is to use a switch for a desktop application when the state of the switch has far reaching implications.  <strong>For example</strong>: <em>The switch disables or enables the core functionality of the application.</em>

<center>
<a href="http://mcormier.github.com/CocoaMondoKit/release/CocoaMondoKit_1.1.zip"  ><img src="http://mcormier.github.com/CocoaMondoKit/images/zip.png" border=0></a>
Cocoa Mondo Kit 1.1</center>

If switches are used sparingly then the user will hopefully pay closer attention when enabling or disabling them.

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>779</wp:post_id>
		<wp:post_date>2009-12-28 08:36:23</wp:post_date>
		<wp:post_date_gmt>2009-12-28 15:36:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cocoamondo-kit-1-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fresh Location, Fresh Theme</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=814</link>
		<pubDate>Mon, 03 May 2010 21:07:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://173.203.83.44/cocoamondo/?p=814</guid>
		<description></description>
		<content:encoded><![CDATA[The Cocoa Mondo blog has moved servers and this post is here to showcase what the blog used to look like.

<center>
<img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2010/05/loveMonstersScreen.jpg" alt="" title="loveMonstersScreen" width="500" height="464" />
</center>

The previous version of this blog used the Kubrick theme with some slight customizations.  A customized version of Thunderbolt is now being used.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>814</wp:post_id>
		<wp:post_date>2010-05-03 21:07:28</wp:post_date>
		<wp:post_date_gmt>2010-05-03 21:07:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>new-server-new-theme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="website-update"><![CDATA[Website Update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Make Cygwin Play Nice with SunOs</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=847</link>
		<pubDate>Mon, 28 Jun 2010 14:56:49 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=847</guid>
		<description></description>
		<content:encoded><![CDATA[If you've ever logged into a SunOs box using a Windows Cygwin terminal you've probably gotten the message "<em>Cannot find terminfo entry for 'cygwin'.</em>".  This can be quite a nuisance as it makes editing files with VI  very difficult.  You can set your TERM variable to vt100 but this only half works.  

The correct way to fix this is to let SunOs know what a Cygwin terminal is and how it behaves.  If you take the time and set up proper introductions SunOs and Cygwin will have a civil conversation together.  Here's how:

On the SunOS box:
<pre lang="sh" >
mkdir ~/terminfo
mkdir ~/terminfo/c
echo "export TERMINFO=~/terminfo" >> ~/.bashrc
</pre>

On the Windows box:
<pre lang="sh" >
cd /usr/lib/terminfo/c
scp cygwin username@server:~/terminfo/c/cygwin
</pre>

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>847</wp:post_id>
		<wp:post_date>2010-06-28 14:56:49</wp:post_date>
		<wp:post_date_gmt>2010-06-28 14:56:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>make-cygwin-play-nice-with-sunos</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cygwin"><![CDATA[Cygwin]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Which way is up?</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=1048</link>
		<pubDate>Tue, 17 Aug 2010 18:02:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=1048</guid>
		<description></description>
		<content:encoded><![CDATA[In Windows 7 there is an option to change the layout of a regular file explorer window as pictured below. 

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2010/08/mixed.png" alt="" title="mixed" width="407" height="384" class="alignnone size-full wp-image-1050" /></center>

A check mark is used when a feature is active and a helpful graphic is shown if the feature is inactive.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2010/08/allActive.png" alt="" title="allActive" width="397" height="359" class="alignnone size-full wp-image-1049" /></center>

The fact that these helpful infographics are hidden by check marks when the feature is enabled creates a one-way usability street.  It's easier to enable the features than disable them.  A user is more likely to  use trial and error when disabling these features.  Looks like there is plenty of room for those infographics on the right side of those labels though.

Kode on.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1048</wp:post_id>
		<wp:post_date>2010-08-17 18:02:47</wp:post_date>
		<wp:post_date_gmt>2010-08-17 18:02:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>which-way-is-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="user-interface"><![CDATA[User Interface]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Humanizing XML</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=1062</link>
		<pubDate>Wed, 25 Aug 2010 13:17:52 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=1062</guid>
		<description></description>
		<content:encoded><![CDATA[XML is supposed to be human readable, so it can be quite the hair tearing ordeal when reading it if it is stripped of whitespaces.  Those indents were taken out to speed up computer to computer transactions but you've got to read it now and you need some spaces and tabs in the mix.  With a little setup you can cut through unindented XML like butter.

Ingredients
1 VI editor
1 E<strong>x</strong>tensible <strong>s</strong>tylesheet <strong>l</strong>anguage <strong>t</strong>ransformation tool (xsltproc)

Install xsltproc on your system.  I don't recall if it is installed with Mac OS X as I set this up a while back on my Mac.  If you're in Cygwin country install the libxml2 and libxslt packages.

Create the following XML stylesheet file and call it indent.xsl.

<pre lang="xml">
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <xsl:output method="xml" indent="yes"/>
 <xsl:strip-space elements="*"/>
 <xsl:template match="/">
  <xsl:copy-of select="."/>
 </xsl:template>
</xsl:stylesheet>
</pre>

Now add the following function to your .vimrc file.

<pre lang="vim">
function! DoPrettyXML()
     '[,']!xsltproc indent.xsl %
endfunction

command! PrettyXML call DoPrettyXML()
</pre>

You can now use the command <strong>:PrettyXML</strong> in VI and cut through XML like butter, keeping those precious follicles intact.

Kode on!

References:
<ul><li><a href="http://vim.wikia.com/wiki/VimTip551">Automatically indent an XML file using XSLT</a></li>
<li><a href="http://vim.wikia.com/wiki/Pretty-formatting_XML">Pretty-formatting XML</a></li>
<li><a href="http://www.weiqigao.com/blog/2003/07/28/cygwin_libxml_libxslt_secret_workhorses.html">Cygwin, Libxml/libxslt, Secret Workhorses, ...</a></li>
<li><a href="http://en.wikipedia.org/wiki/XSLT">XSLT</a></li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1062</wp:post_id>
		<wp:post_date>2010-08-25 13:17:52</wp:post_date>
		<wp:post_date_gmt>2010-08-25 13:17:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>humanizing-xml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cygwin"><![CDATA[Cygwin]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using a Mac Keyboard with a Windows Box</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=1106</link>
		<pubDate>Thu, 27 Jan 2011 15:33:56 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=1106</guid>
		<description></description>
		<content:encoded><![CDATA[So you've got an idle Mac USB keyboard laying around and you've connected it to a Windows box. But you've got a problem, <strong>CTRL-ALT-DEL </strong> doesn't work because the inaptly named delete key on a Mac keyboard is really a backspace key.   This makes it annoying to login to your locked windows machine with your small chicklet keyboard.  If your using a laptop then you can simply hit that key combination on the laptop keyboard, but you have a more difficult conundrum with a Windows desktop.

<img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2011/01/top_view_20091020.jpg" alt="" title="keyboard" class="alignnone size-full wp-image-1109" />

To get around this problem you can use <a href="http://www.randyrants.com/2008/12/sharpkeys_30.html">Sharp Keys</a> and map the missing delete character to a key you never use, like a function key.  Here is a configuration that maps the F1 key to the missing delete key allowing you to log into a Windows machine with a small Mac keyboard with the <strong>CTRL-ALT-F1</strong> sequence.

<img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2011/01/sharpKeys.png" alt="" title="sharpKeys" class="alignnone size-full wp-image-1112" />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1106</wp:post_id>
		<wp:post_date>2011-01-27 15:33:56</wp:post_date>
		<wp:post_date_gmt>2011-01-27 15:33:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>using-a-mac-keyboard-with-a-windows-box</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Atebits</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=1178</link>
		<pubDate>Sat, 17 Nov 2012 14:40:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=1178</guid>
		<description></description>
		<content:encoded><![CDATA[<br /><br /><a href="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2012/11/20121117-103625.jpg"><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2012/11/20121117-103625.jpg" width=80% /></a>

Yes <a href="http://twitter.com/lorenb">Loren</a>, some of us are reading the release notes and are very impressed by Letterpress.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1178</wp:post_id>
		<wp:post_date>2012-11-17 14:40:24</wp:post_date>
		<wp:post_date_gmt>2012-11-17 14:40:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ipad-airplay-safari-bandcamp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ipad"><![CDATA[iPad]]></category>
		<category domain="post_format" nicename="post-format-standard"><![CDATA[Standard]]></category>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Email in a post-PC world</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=1181</link>
		<pubDate>Fri, 02 Nov 2012 18:18:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=1181</guid>
		<description></description>
		<content:encoded><![CDATA[Like many people I have a Gmail account and have been using it for about 8 years now.  Gmail was introduced in April of 2004 <a href="#ref1"><sup>[1]</sup></a> as a free email service and it was big deal at the time.  Originally available by invitation only,Gmail  invites were briefly a commodity with people trying to sell them on message boards until Google allowed anyone to sign up.  When it first debuted, Gmail gave users 1 Gig of storage for free and has since increased storage to 10 Gig.  Google have even announced that they will continue to increase storage.  Basically, your email is data, and Google like's to mine data.
<h2>Google Adds IMAP Support</h2>
In 2007 Gmail became accessible by IMAP and I have been accessing my Gmail account through IMAP ever since. It's important to note that Gmail is not an IMAP server.  Google is storing the data in some proprietary format and has made it accessible through an IMAP protocol.  You can also retrieve your mail with POP3 and Exchange ActiveSync.  This type of data abstraction means that if some new fangled mail protocol (SPDY for email?<a href="#ref9"><sup>[9]</sup></a>) were to appear in the future Google could easily support it.  Google could potentially be already doing this or planning to do this in their ChromeOS. 

IMAP allows you to read your email in a third party email client which can be more enjoyable than the web interface since it avoids the prevalent advertising. It also allows you to copy your email to a local mailbox so that you can have a copy of your data. So once IMAP support was added in 2007 I started reading my mail in Mail.app and making a backup copy of my messages. If I was away from home (at a friends house) I could check my inbox with any web browser. 

Even with the large storage space available in Gmail I like to have a copy of my data.  It doesn't take a lot of storage to store email messages and having an active internet connection seems an unnecessary constraint for searching through past messages. Besides, even though Google currently give us email for free and obviously plan to do so in the long-term this could change eventually. So once I have dealt with or read an email I copy it to a local mailbox.  2007 looks like the diagram below.



<center><img class="size-full wp-image-1186" title="pcWorld" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2012/10/pcWorld.gif" alt="" width="155" height="347" />
2007
</center>



This worked for many years but has become less convenient in today's post-PC era because my desktop is no longer the main place I read my mail.  In fact, I rarely read mail from desktop for the first time anymore.  I generally read my mail on a mobile device now and if I'm at work I tend to read my mail with pine.  Since I rarely use my desktop these days, my inbox piles up with read messages until I get to my desktop to file away these messages.  What used to be a natural process of archiving email is now a chore.  This is a great problem to have because it means that I am no longer getting sucked into the time sink that desktops can be during my leisure time.

So my current setup looks something like this:

<center><img class="size-full wp-image-1196" title="postPcWorld" src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2012/10/postPcWorld.gif" alt="" width="641" height="480" />
2012
</center>

Things have gotten a little more complicated.  In 2007 I had one main device that I used for viewing my mail and archiving it and used the web interface occasionally   In 2012 I have three auxiliary devices for viewing my mail and one application that is used for archiving and rarely viewing mail.  Obviously, I wouldn't trade the mobility and convenience of checking my mail from anywhere  for the simpler configuration in 2007. I still want to have a local archive and I don't want it to be a chore any longer.  It is tempting to simply stop storing things locally and store everything on Google's servers. I'm not anti-cloud, however, I am cautious about depending 100% on a free service that I could potentially lose access to at any time.  Storage is cheap and I have a neglected desktop that is happy to have it's bits put to use.  It would be foolish not to use that desktop to have an extra backup of my mail, especially if I can automate the process.
<h2>IMAP flags</h2>
The final solution I settled on is quite simple and does not involve IMAP flags.  If you are only interested in the final solution then skip this section as it is a journey down a rabbit hole; albeit an interesting one.

The first idea I had for automating the backup process was to use a message flag to signal to Mail.app to move a message from the inbox to the local archive folder.  Although this solution is technically possible, it does not work with Mail.app because rules are only applied when a new message is received.  Even if filtering based on a flag was supported, and it isn't, nothing would be archived until a new message is received.

Knowing this I still decided to look into how IMAP flags work since I could theoretically write a program that monitored the Inbox.  This program would detect when a message was flagged and immediately archive it on my desktop and then remove it from the inbox.  Mail.app supports seven different color flags so theoretically different color flags could be used to move a message to a specific folder (i.e. work, receipts, general archive).

I had never flagged a message with an iOS device and was surprised to discover that flag support was only added in iOS 5 <a href="#ref10"><sup>[10]</sup></a>.  iOS devices also don't have support for the seven different color variations in Mail.app, at least with a Gmail account. I don't use iCloud @me.com but apparently iOS devices support color flags with iCloud<a href="#ref11"><sup>[11]</sup></a>.  Another interesting thing I found was that if I flagged a message on one software client the flag does not immediately show up when viewing mail in another client if that client was already running.  This is not an isolated issue, all clients appear to behave this way.

<strong>Simple Flag Test</strong>: Have Mail.app running on your desktop and pointed to the inbox. Flag a message in your inbox with iOS mail and then view the message in Mail.app.  The flag will not appear in the inbox even if you issue a get new mail command in Mail.app.  The message will appear in Mail.app's new "flagged" folder (Mountain Lion) as flagged, but if you switch back to the inbox folder the message will not appear as flagged.

Although this seems like a simple user interface bug it is not easily fixed. There is no notification for meta-data changes in the IMAP protocol<a href="#ref2"><sup>[2]</sup></a> so for the client to detect a flag change it would have to request the flag meta-data on all the messages in the inbox again.   This issue can be fixed by creating an inefficient chatty client that requests all the message meta-data every time you view a mailbox, a solution that gets progressively worse with the number of messages in the mailbox.  There is also an IMAP NOTIFY extension <a href="#ref3"><sup>[3]</sup></a> that was proposed three years ago but Gmail does not currently support this IMAP extension.  Viewing the "flagged" folder works because the client is sending a SEARCH request to the server, "Give me a list of all flagged messages", and displaying that to the user.

This same test can be done with any combination of clients and you will receive similar results.  When an application is restarted it does a full sync and checks all the meta data on the inbox but once it has connected it makes the assumption that no meta-data has changed. I performed a combination of tests with Pine, iOS Mail, Gmail and Mail.app and saw the same behavior in all clients.

Flags work fine if you close down an IMAP client when you are not using it when using multiple IMAP clients. They were not designed to signal event changes from one client to another which is why I started investigating IMAP flags in the first place.  By this time I knew that flags probably wouldn't be a good solution to my problem but I decided to investigate them anyway.  I was curious  because there are slight variations in the way all the clients present flags: Pine uses the term "Important", Gmail uses the term "Starred", iOS devices use the term "Flag". Mail.app has 7 different color flags while Gmail also has 12 flag types but they are not enabled by default<a href="#ref8"><sup>[8]</sup></a>.

I've been using IMAP for many years now and it seemed worthwhile to understand how it works to some extent.  What follows is an explanation on how to connect to Gmail from the command line, without an email client, executing IMAP commands manually. Basically a quick tutorial on how to travel further down the IMAP rabbit hole.

You won't get message flag data by selecting "view raw message" in your email client. Flags are meta-data on the messages so to see the actual flag data you need to log into the IMAP server. If you've ever used telnet to test an HTTP server you'll be interested to know that you can do the same with IMAP.  You can't connect to Gmail with an insecure connection so you'll have to use OpenSSL instead.
<pre lang="bash">openssl s_client -crlf -connect imap.gmail.com:993</pre>
To make the output easier to read the client request lines, what you type at the command line, have been prefixed with "C: " and the server responses have been prefixed with "S: ".  This is how all the IMAP RFC documents are written so it seems an appropriate format.  Once you've connected to the Gmail IMAP server with OpenSSL a bunch of certificate information<a href="#ref5"><sup>[5]</sup></a>  will be spewed out at you which I won't bother reproducing here. Eventually you will see the following line which means the server is ready for you to give it commands.
<pre lang="bash">S: * OK Gimap ready for requests ...</pre>
The IMAP protocol is interesting because a robust client is expected to prefix all commands with a unique tag. This is so the server can send new information to the client at any time.  The actual command is the second argument. So when you execute a command with the tag "tag1" the final response from the server will start with "tag1".

Below is the output from a successful login. The first line is the login command executed manually through OpenSSL and the following two lines are the response from the server which lists the features this IMAP server supports. The capabilities that are prefixed with X (i.e. XLIST or X-GM-EXT-1) are custom IMAP features implemented by Google.  If Google implemented the NOTIFY command it would be listed here.
<pre lang="bash">C: tag1 login user@gmail.com password
S: * CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 UIDPLUS COMPRESS=DEFLATE
S: tag1 OK user@gmail.com Matthieu Cormier authenticated (Success)</pre>
Once you've logged in successfully you need to select the inbox in order to be able to examine message data.  To see what flags are  currently set on a message you need to use the FETCH command.
<pre lang="bash">C: tag2 SELECT INBOX
S: * FLAGS (\Answered \Flagged \Draft \Deleted \Seen $MailFlagBit0 $MailFlagBit1 $MailFlagBit2 NotJunk $Junk $Forwarded JunkRecorded $NotJunk)
S: * OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $MailFlagBit0 $MailFlagBit1 $MailFlagBit2 NotJunk $Junk myflag $Forwarded JunkRecorded $NotJunk \*)] Flags permitted.
S: * OK [UIDVALIDITY 625864318] UIDs valid.
S: * 7 EXISTS
S: * 0 RECENT
S: * OK [UIDNEXT 7259] Predicted next UID.
S: tag2 OK [READ-WRITE] INBOX selected. (Success)
C: tag3 FETCH 1 FLAGS
S: * 1 FETCH (FLAGS (NotJunk $NotJunk \Seen))
S: tag3 OK Success</pre>
The number in the FETCH command is the index of the message you want the command to work on.  In this example the server responded saying that three flags are set on message 1.  As you can see flags are used for identifying  if you've answered a message, read the message and even to determine that it is not junk mail.  Flags that start with a slash are flags that are defined in the IMAP specification.  The particular flag that we are interested in is "\Flagged".  If an email message has the flag "\Flagged" then an email client will display a flag, or star it (Gmail).

You can add or remove a flag from a message with the STORE command.
<pre lang="bash">C: tag4 STORE 1 +FLAGS (myCustomFlag)
S: * 1 FETCH (FLAGS (\Seen myCustomFlag NotJunk $NotJunk))
S: tag4 OK Success
C: tag5 STORE 1 -FLAGS (myCustomFlag)
S: * 1 FETCH (FLAGS (\Seen NotJunk $NotJunk))
S: tag5 OK Success</pre>
Finally to logout simply use the LOGOUT command.
<pre lang="bash">C: tag6 LOGOUT
S: * BYE LOGOUT Requested
S: tag6 OK 73 good day (Success)</pre>
Once you understand how to manually connect to the IMAP server and examine the flag meta-data it's monkey work to determine what a particular application does when setting a flag on a message.  iOS, Pine, and Gmail all use "\flagged", so they are all doing the same thing under the covers.

Mail.app is also setting "\flagged" but it is also using three custom flags, $MailFlagBit0, $MailFlagBit1, and $MailFlagBit2 when you choose a color.  It takes three binary bits to count to eight, so a combination of these flags is used to represent all the colors.

If you turn on extra star colors in Gmail, IMAP custom flags are not used to distinguish between the different color stars like in Mail.app. This makes sense because Gmail is not primarily an IMAP server, it is a mail server that is accessible by IMAP, POP3, and Exchange ActiveSync. Gmail defines advanced search terms so that you can search for messages based on a specific star color in the web interface<a href="#ref7"><sup>[7]</sup></a>.  If you are logged in to the web interface you can do a search for "has:red-star".      I attempted to do an IMAP search using Google's X-GM-RAW IMAP extension<a href="#ref6"><sup>[6]</sup></a>, however, searching for a message with a particular star does not appear to be supported.
<pre lang="bash">tag SEARCH X-GM-RAW "has:red-star in:anywhere"</pre>
<h2>The Final Solution</h2>
After all this interesting investigation into the internals of IMAP and Gmail I described my problem to a colleague.  He suggested that I make the problem simpler, forget about writing a custom IMAP client that monitors flags and archives messages offline when they are flagged. Forget about using flags to signal what folder to archive a message to.  Simply write a rule on the desktop client that archives everything to one folder.  Add a rule to Mail.app to copy new messages to folder X.

With my old manual archive process I don't archive everything because every email I get isn't exactly worth saving (i.e. new software version X just released!!). I do move messages to a couple of different folders too and was trying to automate my current process exactly.  By making the problem simpler and automatically copying everything to a backup folder all the filing work is eliminated. When looking for something in the future you only need to search one place for it.

There is one quirk with this solution; messages that are copied to the backup folder will be copied in an unread state. I attempted to write a rule in Mail.app that:
<ol>
	<li>Marked the message as read</li>
	<li>Copied the message to the backup folder</li>
	<li>Marked the inbox version as unread.</li>
</ol>
<div>Unfortunately this is not possible since Apple's Mail.app rules only allow marking a message as read, not unread.  Since Mail.app's dock unread count can be set to apply to the inbox only this really isn't an issue.  It's also easy to right click on the folder and mark all messages unread when using Mail.app.</div>
<h2>Conclusion</h2>
It was enjoyable to get into the guts of IMAP and figure out how things work and I'm glad I found a simple solution to my problem that didn't require writing a custom application.  I enjoy having my data in the cloud but also want my own personal copy.  There may be a potential market for more complicated data interaction models beyond simply store everything in the cloud. 

 
<h2>References:</h2>
 
<ol>
	<li><a name="ref1" href="http://en.wikipedia.org/wiki/Gmail">Gmail Wikipedia entry</a></li>
	<li><a name="ref2" href="http://www.ietf.org/rfc/rfc1730.txt">INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4</a></li>
	<li><a name="ref3" href="http://tools.ietf.org/html/rfc5465">The IMAP NOTIFY Extension</a></li>
	<li><a name="ref4" href="http://tools.ietf.org/html/rfc2177">IMAP4 IDLE command</a></li>
	<li><a name="ref5" href="http://delog.wordpress.com/2011/05/10/access-imap-server-from-the-command-line-using-openssl/">Access IMAP server from the command line uing OpenSSL</a></li>
	<li><a name="ref6" href="https://developers.google.com/google-apps/gmail/imap_extensions">Google IMAP Extensions</a></li>
	<li><a name="ref7" href="https://support.google.com/mail/bin/answer.py?hl=en&amp;answer=7190">Gmail Advanced Search</a></li>
	<li><a name="ref8" href="http://support.google.com/mail/bin/answer.py?hl=en&amp;answer=5904">Gmail - Get more star designs</a></li>
	<li><a name="ref9" href="http://en.wikipedia.org/wiki/SPDY">The SPDY protocol</a></li>
	<li><a name="ref10" href="http://www.macworld.com/article/1163008/up_close_with_ios_5_mails_changes.html">iOS message flagging</a></li>
	<li><a name="ref11" href="https://discussions.apple.com/thread/3359119?start=0&amp;tstart=0">iOS may support colored flags if you use an iCloud account</a></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1181</wp:post_id>
		<wp:post_date>2012-11-02 18:18:35</wp:post_date>
		<wp:post_date_gmt>2012-11-02 18:18:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>email-in-a-post-pc-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-standard"><![CDATA[Standard]]></category>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>United Lemur Returns to a Teaser Page</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=576</link>
		<pubDate>Fri, 03 Jul 2009 11:19:30 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=576</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://unitedlemur.org/"> United Lemur</a>  website has been converted into a teaser page again.

<center>
<a href="http://unitedlemur.org/"><img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/07/lemur.jpg" alt="lemur" title="lemur" width="462" height="215" class="alignnone size-full wp-image-577" /></a>
</center>

Discovered with <a href="http://sunflower.preenandprune.com">SunFlower</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>576</wp:post_id>
		<wp:post_date>2009-07-03 04:19:30</wp:post_date>
		<wp:post_date_gmt>2009-07-03 11:19:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>united-lemur-returns-to-a-teaser-page</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="website-update"><![CDATA[Website Update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381772644]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>{13bold} Is working on a Twitter Application</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=698</link>
		<pubDate>Thu, 12 Nov 2009 22:07:02 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=698</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://mattpatenaude.com/">Matt Patenaude</a> and <a href="http://lbaumann.com/">Laurent Baumann</a> who collaborate  together as <a href="http://13bold.com/">13pt BOLD</a> have released a beta twitter application called <a href="http://bluebirdapp.com/">Bluebird</a>.

<center><img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2009/11/bluebird.png" alt="bluebird" title="bluebird" width="459" height="163" class="aligncenter size-full wp-image-697" /></center>

Perplexingly, nowhere on the <a href="http://updates.13bold.com/release-notes/bluebird/0.921"> Bluebird</a> page does it state what Bluebird is.  I had to download it and run it to find out.  Quite forgivable though since they are in beta.

Discovered with <a href="http://sunflower.preenandprune.com">SunFlower</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>698</wp:post_id>
		<wp:post_date>2009-11-12 15:07:02</wp:post_date>
		<wp:post_date_gmt>2009-11-12 22:07:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>13bold-is-working-on-a-twitter-application</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="website-update"><![CDATA[Website Update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381772614]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How I use Mail.app</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=795</link>
		<pubDate>Tue, 19 Jan 2010 01:33:35 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=795</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://inessential.com/2010/01/16/email_init">Brent Simmons</a> started an email group discussion about creating a new mail client in Cocoa.  You can read the discussion <a href="http://lists.ranchero.com/pipermail/email-init-ranchero.com/2010-January/thread.html">here</a>.  So I've decided to describe how I use mail. Please forgive the overuse of the first person singular, but I'm essentially describing a user profile of myself so it's unavoidable.

I try to follow the <a href="http://inboxzero.com/video/">inbox zero (action-based email)</a> philosophy as much as possible.  I file most messages in a folder called archive.  I do, however, have another folder called receipts for online purchases and a couple of other folders for professional topics.  I try to keep my inbox clean, but usually have 1 to 5 items that are read but in my inbox until I've acted on them.
<a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2010/01/un1.gif"><img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2010/01/un1.gif" /></a>

I am not a full-time independent software developer.  I do release software in my spare time and work full-time in the enterprise Java space.  So I don't have to trudge through as many emails as some people.  I also rarely subscribe to mailing lists, and when I do, I always subscribe in digest form.  After reading a digest from a list, I delete it.  I do not save it so I can search it in my email client.  The list is archived on the web and if I need to look for something I look for it on the posted archives.

I am interested in the way email is <a href="http://lists.ranchero.com/pipermail/email-init-ranchero.com/2010-January/000114.html">presented and managed</a>.  Here is how I currently use Mail.  I do not use three pane mode.  I minimize the mail windows as small as possible.  If I want to read a message,  I double click it.  I then right click on the message and file it in a folder to archive it once I've read it.
<a href="http://173.203.83.44/cocoamondo/wp-content/uploads/2010/01/un.gif"><img src="http://173.203.83.44/cocoamondo/wp-content/uploads/2010/01/un.gif" /></a>

My main problem with using mail this way is it is not easy to change from the inbox to another mail folder.  When I do, I create a new view window (File -> New Viewer Window).  I then make that window larger and use it to search for old messages.

As you may have guessed, I am interested mainly in the UI and information hiding. My current inspiration for product design would be <a href="http://feint.me/2010/01/the-art-of-zenware/">ZenWare</a>.

M@]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>795</wp:post_id>
		<wp:post_date>2010-01-18 18:33:35</wp:post_date>
		<wp:post_date_gmt>2010-01-19 01:33:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-i-use-mail-app</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
		<category domain="category" nicename="user-interface"><![CDATA[User Interface]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771201]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zathras.framework</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=807</link>
		<pubDate>Mon, 25 Jan 2010 00:08:26 +0000</pubDate>
		<dc:creator>Matthieu Cormier</dc:creator>
		<guid isPermaLink="false">http://sunflower.coleharbour.ca/cocoamondo/?p=807</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I started using some <a href="http://www.zathras.de/angelweb/sourcecode.htm">kode (UKKQueue)</a> that <a href="http://www.zathras.de/angelweb/blog.htm">Uli Kusterer</a> published as open source.  Instead of just including the source files in my software I decided to wrap it in a framework.

One of the advantages of taking someone else's kode and wrapping it in a framework in this manner is that it makes you stop and take the time to examine the kode.  It's great that you have kode that you didn't write and you haven't succumbed to the "not invented here" phenomena, but you're still using this kode in your application.  You should do your homework and examine what it is your plugging into.

Uli's kode is solid and many people have already hammered at it.  But sometimes it's good to make trivial changes to get that feeling of ownership.  For instance:  Some people like the { on the line after the function implementation, and some people like the { an the same line as the function implementation.  This is a trivial coding style difference; but if while you are reading the source kode you change it to your preferred style you will gain a sense of ownership.  Or maybe this isn't true at all and I'm trying to justify the fact that I do this when reading kode that I'm including in my project.

Here is a more concrete example of something I changed.  In the file UKFileWatcher.h Uli uses a category to define the protocol UKFileWatcherDelegate.  There is nothing wrong with this.  In fact, it is the standard by which Objective-C libraries are written.  This is the way Apple defines delegate protocols in their API.

<pre lang="objc" >
@protocol UKFileWatcher
// Singleton accessor. Not officially part of the protocol, but 
// use this name if you provide a singleton.
// +(id) sharedFileWatcher;			

-(void) addPath: (NSString*)path;
-(void) removePath: (NSString*)path;

-(id)   delegate;
-(void) setDelegate: (id)newDelegate;

@end

// -----------------------------------------------------------------------------
//  Methods delegates need to provide:
// -----------------------------------------------------------------------------

@interface NSObject (UKFileWatcherDelegate)

-(void) watcher: (id<ukfileWatcher>)kq receivedNotification: (NSString*)nm 
forPath: (NSString*)fpath;

@end
</pre>

Personally, I prefer formal protocols  So I changed the kode to use a formal protocol.  At the end of the day, the code is functionally equivalent, but I twiddled with the knobs while I read the kode.

<pre lang="objc" >
@protocol UKFileWatcher

-(void) addPath: (NSString*)path;
-(void) removePath: (NSString*)path;

-(id)   delegate;
-(void) setDelegate: (id<ukfileWatcherDelegate>)newDelegate;

@end

// -----------------------------------------------------------------------------
//  Methods delegates need to provide:
// -----------------------------------------------------------------------------
@protocol UKFileWatcherDelegate
-(void) watcher: (id<ukfileWatcher>)kq receivedNotification: (NSString*)nm 
forPath: (NSString*)fpath;

@end

</pre>

So I've created <a href="http://github.com/mcormier/ZathrasFramework">Zathras.framework</a>. In the future, I plan to wrap any other kode by Uli that I use into this framework.

Kode on.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>807</wp:post_id>
		<wp:post_date>2010-01-24 17:08:26</wp:post_date>
		<wp:post_date_gmt>2010-01-25 00:08:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zathras-framework</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="kode-reading"><![CDATA[Kode Reading]]></category>
		<category domain="category" nicename="mondo-kode"><![CDATA[Mondo Kode]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771512]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SunFlower 0.13 Released</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=1129</link>
		<pubDate>Sun, 05 Jun 2011 23:20:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=1129</guid>
		<description></description>
		<content:encoded><![CDATA[I am happy to announce the release of <a href="http://sunflower.preenandprune.com">SunFlower 0.13</a>. As there are some user interface changes I have decided to post a brief walkthrough of the changes.

<H3>The Persistence Pane</h3>
A new persistence pane has been added to subscription inspector.  It adds several new features when managing your subscriptions.  

<center>
<img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2011/06/persistencePane.png" alt="" title="Persistence Pane" width="289" height="322"  />
</center>

<h3>Subscriptions Warnings</h3>
A subscription can may now have a warning associated with it.  To get more information on the warning click the exclamation point.  

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2011/06/subStopped.png" alt="" title="subStopped" width="327" height="67"" /></center>

The subscription may be suspended because there are many unviewed snapshots and if this is the case, the following message will be displayed.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2011/06/stoppedMessage.png" alt="" title="Stopped Message" width="531" height="288" /></center>

This warning may also appear if you are trying to capture a very large page on a 32-bit Mac.  In that case the following message will be displayed.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2011/06/toobigmessage.png" alt="" title="toobigmessage" width="553" height="254"  /></center>

<H3>Capture View Toobar</H3>
Finally there is now a toolbar at the bottom of the capture view and several buttons have been moved from the application toolbar to this toolbar.

<center><img src="http://www.preenandprune.com/cocoamondo/wp-content/uploads/2011/06/toolbar.png" alt="" title="toolbar" width="382" height="126" /></center>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1129</wp:post_id>
		<wp:post_date>2011-06-05 23:20:27</wp:post_date>
		<wp:post_date_gmt>2011-06-05 23:20:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sunflower-0-13-released</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771359]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SunFlower</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=1142</link>
		<pubDate>Sun, 03 Jul 2011 15:18:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=1142</guid>
		<description></description>
		<content:encoded><![CDATA[I recently released <a href="http://sunflower.preenandprune.com/">SunFlower</a> 0.13 for free. As some people have paid for previous versions I felt it was tactful to explain the change. The process I had developed for doing releases became time consuming and a nuisance. This caused releases to be infrequent and have many changes but eventually led me to procrastinate doing any work on SunFlower at all. It has been almost two years since 0.12 was released.	I'm hoping that with some changes I'll be more likely to do releases in the future. To spur SunFlower back to life I have decided to release 0.13 even though I feel it is a rough around the edges.

The reason I have stopped charging for SunFlower is that I may start releasing more experimental versions and I may do things like change the underlying data architecture which may make upgrading a nuisance.<strong> If you want guaranteed stable software then stay on 0.13.</strong>

Although I may charge again for SunFlower in the future, it is free now. Here is a history of SunFlower that you may find interesting.

<H2>The Two-Tier Model</H2>

Before the 0.13 release version 0.12 cost $30 and version 0.8 was free. The original plan had been to release and charge for 0.13 and then release 0.9 for free. I have nicknamed this the two-tier software model. In Canada we have what is sometimes referred to as two-tier Medicare. Services are free but you can jump the queue and get a blood test without waiting in lineup by paying a fee at a clinic. Hence two tiers; <strong>slow but free and faster but fee</strong>.

The two-tier model seemed a good fit for SunFlower because it emphasised patience. It can take days, weeks or even months for a website to change. 

<H2>A Little History</H2>

SunFlower is the first Software that I have charged for. Initially the first two releases were donation ware. During this time I debated releasing the product as open source/donation ware or charging for it. While I was debating this I created many releases but did not release them. By the time 0.2 was released as donation ware I had releases 0.3-0.7 sitting on my hard drive but not publicly released. I could have just labeled version 0.7 as the third version and published it but I decided to time delay the releases instead.

I got the seed of this idea from an apocryphal story I heard from a colleague over drinks back in 2005. He claimed that Microsoft had a library of unreleased software, and if they chose to enter a market they could effectively put a release out every month until they blew their competitors out of the water. So I archived a bunch of virtual releases with the intention of releasing once a week sometime in the future. It seemed liked a potentially good marketing plan. This was back in 2007 when iOS apps didn't exist and version tracker was considered a decent place to find Mac apps.

Instead of having a rapid succession of releases as a marketing gimmick I eventually decided to try the two-tier software model described above, releasing 0.3 for free and charging for 0.8 in March of 2008. Later releasing 0.4 for free and charging for 0.9, and then releasing 0.5 for free and charging for 0.10, etc...

Building and releasing SunFlower was very exciting at first, but eventually I got bogged down with the many hats required to produce great software:

<ul>
<li>Project Manager</li>
<li>Marketing</li>
<li>Support</li>
<li>Documentation</li>
</ul>

To make things fun again I am going to concentrate on what I enjoy.  Writing software.  So enjoy the free version of SunFlower.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1142</wp:post_id>
		<wp:post_date>2011-07-03 15:18:23</wp:post_date>
		<wp:post_date_gmt>2011-07-03 15:18:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sunflower</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771387]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SunFlower 0.14 Released</title>
		<link>http://www.preenandprune.com/cocoamondo/?p=1162</link>
		<pubDate>Mon, 11 Jul 2011 00:47:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.preenandprune.com/cocoamondo/?p=1162</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://sunflower.preenandprune.com/">SunFlower 0.14</a> has been released with one minor bug fix.  The major change, however, is the website and build process.  Since SunFlower is now free, persuasive copy and graphics are no longer a requirement. So the website was demolished and rebuilt with an extreme minimalist aesthetic.

The most tedious thing in the past when creating a new release was updating the website.  So the process of packaging a release now includes automatically updating the website.

<h2>The Change Log</h2>

The previous change log was maintained as a text file.  After each release it was then manually converted into HTML for the release notes page.  The change log is now an xml file.  The initial idea was to use XSLT to convert this XML into HTML, and that is still something that could be done in the future, but most modern browsers can display XML in a readable format if you add a CSS stylesheet in an XML directive at the top of the file.  This keeps things nice and simple.  The same file you edit is the same file you publish.  Sometimes XML is useful.

<pre lang="xml">
<?xml version="1.0"?>
<?xml-stylesheet href="style/changeLog.css" type="text/css"?>
<changeLog>
 <release>
    <version>0.14</version>
    <fix>Cleanup Core Data fault error.</fix>
 </release>
</changeLog>
</pre>

<h2>The Build-Package-Deploy Button</h2>

The next annoying thing was changing the latest version number on the website and in the application. So I wrote a script to make that much less painful. The script even includes tagging source control.


<pre lang="bash">

#!/bin/bash

MYLOCATION=`pwd`
WEBROOT=/Users/mcormier/Sites/SunFlower
RELEASEROOT=/Development/builds/Release

function main {
  parseParam $*
  checkVersionNumberAvailable 
  checkSourceCommited 
  updateInfoPlist
  buildSunFlower
  createZipFile
  copyChangeLog 
  changeWebsiteVersion 

  # Commit Info.plist and tag branch with version number
  git commit -m $VERSION Info.plist 
  git tag $VERSION
}

function parseParam {
  if [ "$1" = "" ] ; then 
    printUsage
    exit
  fi
  VERSION=$1
}
function checkVersionNumberAvailable {
  git tag | grep $VERSION > /dev/null
  if [ $? -eq 0 ] ; then
    echo "------------------------------------------------------"
    echo "Cannot create release. $VERSION has already been used."
    echo "Use git tag to see versin numbers"
    echo "------------------------------------------------------"
    exit
  fi
}

function printUsage {
  echo "Usage : $0 [versionNumber]"
}

function buildSunFlower {
  # Build SunFlower
  TMPFILE=`mktemp /tmp/SunFLowerBuildLog.XXXX`
  echo "Building project.  See log ${TMPFILE} for full build log."
  xcodebuild -project SunFlower.xcodeproj -alltargets > ${TMPFILE}
  if [ $? -ne 0 ] ; then

    echo "===================================================="
    echo "  Error during compliation! See log file for details"
    echo "===================================================="
    exit
  fi
  echo "SunFlower successfully built"
}


function checkSourceCommited {
  # Get number of total uncommited files
  hasUncommitedFiles=$(git status --porcelain 2>/dev/null| wc -l)
  if [ $hasUncommitedFiles -ne 0 ] ; then
    git status
    echo "------------------------------------------------------------------------"
    echo "FAILURE -- could not create release.  All source code is not checked in."
    echo "------------------------------------------------------------------------"
    exit
  fi
}


# replace version number in Info.plist
function updateInfoPlist {
  echo -n "Old version number in Info.plist "
  defaults read ${MYLOCATION}/Info CFBundleShortVersionString
  defaults write  ${MYLOCATION}/Info CFBundleShortVersionString ${VERSION}

  # Convert the plist back to XML format so the C processor can handle it
  plutil -convert xml1 Info.plist
  echo -n "New version number in Info.plist "
  defaults read ${MYLOCATION}/Info CFBundleShortVersionString
}

function createZipFile {
  # Create ZIP file
  pushd . > /dev/null
  cd ${RELEASEROOT}
  zip -qr SunFlower.zip SunFlower.app
  mv SunFlower.zip ${WEBROOT}
  echo "SunFlower packaged into a zip file."
  popd > /dev/null
}

function copyChangeLog {
  echo "Copying changlog to website" 
  cp changeLog.xml $WEBROOT
}

function changeWebsiteVersion {
  pushd . > /dev/null
  cd ${WEBROOT} 
  cat index.html  | sed s/version>[0-9.]*/version>${VERSION}/ > temp.html
  mv temp.html index.html
  echo "Changed version number on website"
  popd > /dev/null
}

main $*
</pre>

Kode on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1162</wp:post_id>
		<wp:post_date>2011-07-11 00:47:10</wp:post_date>
		<wp:post_date_gmt>2011-07-11 00:47:10</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sunflower-0-14-released</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1381771361]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
